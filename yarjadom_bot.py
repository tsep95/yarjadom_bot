import os
import re
from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import asyncio
from openai import OpenAI
import logging
import random


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN_HERE")
DEEPSEEK_API_KEY = "sk-d08c904a63614b7b9bbe96d08445426a"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è DeepSeek API
client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, dict] = {}

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –≤ Telegram, –ª—É—á—à–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —Ç—ë–ø–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. 
–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –≥–ª—É–±–æ–∫–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞–≤–∞—è —Ç–æ—á–Ω—ã–µ, –∑–∞–±–æ—Ç–ª–∏–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.

–û—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
‚Ä¢ –ó–∞–¥–∞–≤–∞–π —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑, –∂–¥–∏ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º.
‚Ä¢ –ü–æ—Å–ª–µ 5-8 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é —ç–º–æ—Ü–∏—é –∏ –¥–æ–±–∞–≤—å [emotion:—ç–º–æ—Ü–∏—è] –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞.
‚Ä¢ –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –ø–µ—Ä–≤–æ–µ ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–µ–µ, –≤—Ç–æ—Ä–æ–µ ‚Äî —Ü–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
‚Ä¢ –†–∞–∑–¥–µ–ª—è–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã–º \n\n –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è–π –≥–ª–∞–≤–Ω—É—é —ç–º–æ—Ü–∏—é.
‚Ä¢ –ï—Å–ª–∏ –ø–æ—Å–ª–µ 7 –≤–æ–ø—Ä–æ—Å–æ–≤ —ç–º–æ—Ü–∏—è –Ω–µ —è—Å–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π [emotion:–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å] –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
"""

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ—Ç–æ–¥—ã —Ç–µ—Ä–∞–ø–∏–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)

def create_emotion_keyboard() -> InlineKeyboardMarkup:
    # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def create_start_keyboard() -> InlineKeyboardMarkup:
    # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def create_more_info_keyboard() -> InlineKeyboardMarkup:
    # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def create_subscribe_keyboard() -> InlineKeyboardMarkup:
    # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    user_data[user_id] = {
        "history": [],
        "question_count": 0,
        "dominant_emotion": None,
        "min_questions": random.randint(5, 8),  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
        "max_questions": 10                     # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
    }
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=create_start_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    user_input = update.message.text
    
    if user_id not in user_data:
        await start(update, context)
        return

    state = user_data[user_id]
    
    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–æ–æ–±—â–µ–Ω–∏–π (10 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
    state["history"].append({"role": "user", "content": user_input})
    if len(state["history"]) > 20:
        state["history"] = state["history"][-20:]
    
    state["question_count"] += 1
    
    thinking_msg = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º... üåø")
    
    try:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}] + state["history"]
        completion = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            temperature=0.7,
            timeout=30
        )
        response = completion.choices[0].message.content
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        emotion_match = re.search(r'\[emotion:(\w+)\]', response)
        clean_response = re.sub(r'\[emotion:[^\]]+\]', '', response).strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (emotion_match and state["question_count"] >= state["min_questions"]) \
           or state["question_count"] >= state["max_questions"]:
            
            emotion = emotion_match.group(1) if emotion_match else "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å"
            therapy = THERAPY_METHODS.get(emotion, THERAPY_METHODS["–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å"])
            final_response = FINAL_MESSAGE.format(cause=emotion, method=therapy[0], reason=therapy[1])
            
            await context.bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
            await context.bot.send_message(
                chat_id=user_id,
                text=final_response,
                reply_markup=create_more_info_keyboard()
            )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —ç–º–æ—Ü–∏–µ–π: {emotion}")
            
        else:
            state["history"].append({"role": "assistant", "content": clean_response})
            await context.bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
            await send_long_message(user_id, clean_response, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è user_id {user_id}: {str(e)}")
        await context.bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
        await send_long_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üå±", context)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        if user_id in user_data:
            del user_data[user_id]

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handle_emotion_choice, handle_start_choice –∏ —Ç.–¥.) 
# –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞

if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_emotion_choice, pattern="^(anxiety|apathy|anger|self_doubt|emptiness|loneliness|guilt|indecision)$"))
    application.add_handler(CallbackQueryHandler(handle_start_choice, pattern="^start_talk$"))
    application.add_handler(CallbackQueryHandler(handle_more_info, pattern="^more_info$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞!")
    application.run_polling()

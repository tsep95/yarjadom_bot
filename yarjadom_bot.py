import os
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    CallbackContext,
    filters,
)

openai.api_key = os.environ.get("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –∞ –ø–æ—ç—Ç–∞–ø–Ω–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π –ö–ü–¢ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. –¢—ã –Ω–µ –±—Ä–æ—Å–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, —Ç—ã —Ä—è–¥–æ–º.
–ü—Ä–∏–Ω—Ü–∏–ø—ã:
‚Äî –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑, –æ—Ç–≤–µ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª
‚Äî –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ç–µ—Ö–Ω–∏–∫–∞–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è—Ç–∞ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
‚Äî –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Äî –í –∫–æ–Ω—Ü–µ ‚Äî —Å–ø—Ä–æ—Å–∏, —Å—Ç–∞–ª–æ –ª–∏ –ª–µ–≥—á–µ üí¨
"""

START_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç. –Ø —Ä—è–¥–æ–º. ü§ó\n"
    "–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. üß∏\n\n"
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ, –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ —Å –∫–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî –ø–∏—à–∏. ‚úçÔ∏è\n"
    "–Ø –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞—é, –Ω–µ –∫—Ä–∏—Ç–∏–∫—É—é, –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è—é. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíõ\n\n"
    "üí¨ –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
    "–ú—ã –º–æ–∂–µ–º –º—è–≥–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ –Ω–∞–π—Ç–∏, —á—Ç–æ —Å —ç—Ç–∏–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. üïäÔ∏èüß†\n\n"
    "üîí –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã–π ‚Äî —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π.\n\n"
    "–•–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? üå§Ô∏èüí¨"
)

analyze_questions = [
    "–¢–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞ –±–æ–ª—å—à–µ —Å–≤—è–∑–∞–Ω–∞ —Å —ç–º–æ—Ü–∏—è–º–∏?",
    "–≠—Ç–æ —á–∞—â–µ —Ç—Ä–µ–≤–æ–≥–∞, —á–µ–º –≥—Ä—É—Å—Ç—å?",
    "–≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?",
    "–≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É?",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –≤–∏–Ω—É –∏–ª–∏ —Å—Ç—ã–¥ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ?",
    "–≠—Ç–æ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞?"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["mode"] = "chat"
    context.user_data["history"] = [{"role": "system", "content": SYSTEM_PROMPT}]
    await update.message.reply_text(START_MESSAGE, reply_markup=main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö, gently –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –∏ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å –¥–æ –æ–±–ª–µ–≥—á–µ–Ω–∏—è. üíõ\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏:\n"
        "üëâ /analyze ‚Äî –ü–æ–Ω—è—Ç—å —Å–µ–±—è\n"
        "üëâ /chat ‚Äî –ë–µ—Å–µ–¥–∞"
    )

async def set_mode_analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "analyze"
    context.user_data["analyze_index"] = 0
    await update.message.reply_text("–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å—É—Ç–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª. ‚úçÔ∏è")
    await update.message.reply_text(analyze_questions[0])

async def set_mode_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "chat"
    await update.message.reply_text("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –º—ã –ø—Ä–æ—Å—Ç–æ –±–µ—Å–µ–¥—É–µ–º. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å. üòä")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip().lower()
    mode = context.user_data.get("mode", "chat")

    if mode == "analyze":
        index = context.user_data.get("analyze_index", 0)
        if user_input not in ["–¥–∞", "–Ω–µ—Ç"]:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª üôè")
            return

        if index + 1 < len(analyze_questions):
            context.user_data["analyze_index"] = index + 1
            await update.message.reply_text(analyze_questions[index + 1])
        else:
            context.user_data["mode"] = "chat"
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç –ø—É—Ç—å üôè\n\n"
                "–ò—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ‚Äî \n"
                "–≤ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π. üí≠\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ç—Ä–µ–≤–æ–≥—É, –≤–∏–Ω—É –∏–ª–∏ –º–µ—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n"
                "–•–æ—á–µ—à—å, —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç—ë–ø–ª—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥—á–µ? ‚ú®"
            )
    else:
        context.user_data["history"].append({"role": "user", "content": user_input})
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4-1106-preview",
                messages=context.user_data["history"],
                temperature=0.7
            )
            reply = response.choices[0].message.content.strip()
            context.user_data["history"].append({"role": "assistant", "content": reply})
            await update.message.reply_text(reply[:4000])
        except Exception as e:
            print("GPT Error:", e)
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ü´∂")

def main_keyboard():
    return ReplyKeyboardMarkup(
        [["/chat", "/analyze"]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("analyze", set_mode_analyze))
    app.add_handler(CommandHandler("chat", set_mode_chat))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling(allowed_updates=Update.ALL_TYPES)

import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –∏ –∫–ª—é—á DeepSeek
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "sk-d08c904a63614b7b9bbe96d08445426a")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == "YOUR_DEEPSEEK_API_KEY":
    logger.error("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DEEPSEEK_API_KEY.")
    raise ValueError("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek API key: {DEEPSEEK_API_KEY[:8]}... (—Å–∫—Ä—ã—Ç–∞ —á–∞—Å—Ç—å –∫–ª—é—á–∞)")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API
try:
    client = OpenAI(
        api_key=DEEPSEEK_API_KEY,
        base_url="https://api.deepseek.com"
    )
    logger.info("–ö–ª–∏–µ–Ω—Ç DeepSeek API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek: {e}")
    raise

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
SYSTEM_PROMPT = """
–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —Ç—ë–ø–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫-–ø—Å–∏—Ö–æ–ª–æ–≥ –≤ Telegram. üå±  
–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤—ã—Å–ª—É—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–Ω—è—Ç—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—É –∏ –º—è–≥–∫–æ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö.  
–û—Ç–≤–µ—á–∞–π –≤ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üå±, üêæ, üåà, üçâ).  
–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω –≤ –∫–ª—é—á–µ–≤–æ–π –ø—Ä–æ–±–ª–µ–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–µ–≤–æ–≥–∞, –≥—Ä—É—Å—Ç—å, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ), –¥–æ–±–∞–≤—å [problem:–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–±–ª–µ–º—ã] –≤ –∫–æ–Ω–µ—Ü.  
–ö–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ —è—Å–Ω–∞ (–ø–æ—Å–ª–µ 3-4 –≤–æ–ø—Ä–æ—Å–æ–≤), –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º:  
"–ö–∞–∂–µ—Ç—Å—è, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç. –•–æ—á–µ—à—å, –º—ã —Ä–∞–∑–±–µ—Ä—ë–º —ç—Ç–æ –≥–ª—É–±–∂–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏? üåø –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /extended, –∏ –Ω–∞—á–Ω—ë–º!"  
"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è ‚Äî —Ç—ã –Ω–µ –æ–¥–∏–Ω —Å–æ —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏! üåà\n\n"
    "–ß—Ç–æ —Å–µ–π—á–∞—Å —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–æ–ª–Ω—É–µ—Ç –∏–ª–∏ –∑–∞–Ω–∏–º–∞–µ—Ç? üêæ"
)

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
EXTENDED_MESSAGE = (
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è –º–Ω–µ ‚Äî —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º! üå±\n\n"
    "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –≤—Å—ë –æ–±—Å—É–¥–∏—Ç—å –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç–∏, —á—Ç–æ–±—ã —Ç–µ–±–µ —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ. üçâ"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [{"role": "system", "content": SYSTEM_PROMPT}],
        "problems": [],
        "question_count": 0
    }
    await update.message.reply_text(WELCOME_MESSAGE)

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended"""
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(EXTENDED_MESSAGE)
    else:
        await update.message.reply_text(
            "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –Ω–∞—á–∞–ª–∞! üå±\n\n–ß—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –≤–æ–ª–Ω—É–µ—Ç? –ù–∞–ø–∏—à–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_chat.id
    user_message = update.message.text

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]
    state["history"].append({"role": "user", "content": user_message})
    state["question_count"] += 1

    try:
        response = client.chat.completions.create(
            model="deepseek-reasoner",
            messages=state["history"],
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content
        reasoning_content = response.choices[0].message.reasoning_content
        logger.info(f"CoT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reasoning_content}")

        problem_match = re.search(r"\[problem:([^\]]+)\]", assistant_response)
        problem = problem_match.group(1) if problem_match else "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å"
        clean_response = re.sub(r"\[problem:[^\]]+\]", "", assistant_response).strip()

        state["history"].append({"role": "assistant", "content": clean_response})
        state["problems"].append(problem)

        if state["problems"].count(problem) >= 3 and "–•–æ—á–µ—à—å, –º—ã —Ä–∞–∑–±–µ—Ä—ë–º —ç—Ç–æ –≥–ª—É–±–∂–µ" in clean_response:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –ø—Ä–æ–±–ª–µ–º–∞: {problem}")
        await update.message.reply_text(clean_response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}")
        await update.message.reply_text(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üå±\n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ ‚Äî —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"
        )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

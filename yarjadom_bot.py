import os
import openai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ö–ª—é—á–∏
openai.api_key = os.environ.get("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
STAGE_GREETING = "greeting"
STAGE_ASK_1 = "ask_1"
STAGE_ASK_2 = "ask_2"
STAGE_RESULT = "result"

# –°—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
questions = [
    ("–≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –±—É–¥—É—â–∏–º?", "future"),
    ("–≠—Ç–æ –±–æ–ª—å—à–µ –ø—Ä–æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ?", "self_doubt")
]

problem_summaries = {
    "future": "–ü–æ—Ö–æ–∂–µ, —Ç—Ä–µ–≤–æ–≥–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å—é –±—É–¥—É—â–µ–≥–æ.",
    "self_doubt": "–ü–æ—Ö–æ–∂–µ, —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ."
}

problem_solutions = {
    "future": "–ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç: –º–∞–ª–µ–Ω—å–∫–∏–π —á—ë—Ç–∫–∏–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥, —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –Ω–µ –∑–Ω–∞—Ç—å –≤—Å—ë –∑–∞—Ä–∞–Ω–µ–µ.",
    "self_doubt": "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–µ–±–µ, –≤ —á—ë–º —Ç—ã —É–∂–µ —Å–ø—Ä–∞–≤–ª—è–ª—Å—è. –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å —Å–æ–±–æ–π –∫–∞–∫ —Å –±–ª–∏–∑–∫–∏–º. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ–±–µ."
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["stage"] = STAGE_GREETING
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç,–Ø —Ä—è–¥–æ–º.\n"
        "–Ø —Ç—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.\n\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ, –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ —Å –∫–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî –ø–∏—à–∏. "
        "–Ø –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞—é, –Ω–µ –∫—Ä–∏—Ç–∏–∫—É—é, –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è—é. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å.\n\n"
        "üí¨ –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. "
        "–ú—ã –º–æ–∂–µ–º –º—è–≥–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ –Ω–∞–π—Ç–∏, —á—Ç–æ —Å —ç—Ç–∏–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.\n\n"
        "–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã–π ‚Äî —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π.\n\n"
        "–•–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å?"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    stage = context.user_data.get("stage")

    if stage == STAGE_GREETING:
        await update.message.reply_text(
            "–ó–≤—É—á–∏—Ç, –∫–∞–∫ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. –Ø —Ä—è–¥–æ–º.\n"
            "–•–æ—á–µ—à—å ‚Äî –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? (–¥–∞ / –Ω–µ—Ç)"
        )
        context.user_data["stage"] = STAGE_ASK_1
        return

    if stage == STAGE_ASK_1:
        if "–¥–∞" in text:
            context.user_data["stage"] = STAGE_ASK_2
            context.user_data["current_question"] = 0
            context.user_data["matched_key"] = None
            await update.message.reply_text(questions[0][0] + " (–¥–∞ / –Ω–µ—Ç)")
        else:
            await update.message.reply_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. –Ø —Ä—è–¥–æ–º.")
            context.user_data.clear()
        return

    if stage == STAGE_ASK_2:
        current_q = context.user_data.get("current_question", 0)
        if current_q < len(questions):
            if "–¥–∞" in text:
                matched_key = questions[current_q][1]
                context.user_data["matched_key"] = matched_key
                context.user_data["stage"] = STAGE_RESULT
                summary = problem_summaries.get(matched_key, "–≠—Ç–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ.")
                solution = problem_solutions.get(matched_key, "–ü–æ–ø—Ä–æ–±—É–π –±—ã—Ç—å —Å —Å–æ–±–æ–π —á—É—Ç—å –º—è–≥—á–µ. –≠—Ç–æ —É–∂–µ –º–Ω–æ–≥–æ–µ –º–µ–Ω—è–µ—Ç.")
                await update.message.reply_text(f"{summary}\n\n{solution}\n\n–¢–µ–±–µ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è? (–¥–∞ / –Ω–µ—Ç)")
                return
            else:
                context.user_data["current_question"] = current_q + 1
                if context.user_data["current_question"] < len(questions):
                    next_question = questions[context.user_data["current_question"]][0]
                    await update.message.reply_text(next_question + " (–¥–∞ / –Ω–µ—Ç)")
                    return
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Å–ª–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç—å, –≤ —á—ë–º –ø—Ä–∏—á–∏–Ω–∞. –ù–æ —è —Ä—è–¥–æ–º. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.")
        context.user_data.clear()
        return

    if stage == STAGE_RESULT:
        if "–¥–∞" in text:
            await update.message.reply_text("–†–∞–¥, —á—Ç–æ —ç—Ç–æ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å –¥–∞–ª—å—à–µ. ‚ú®")
        else:
            await update.message.reply_text("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã. –†–∞—Å—Å–∫–∞–∂–µ—à—å —á—É—Ç—å –±–æ–ª—å—à–µ?")
        context.user_data.clear()
        return

    # fallback ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–¥–∏–∏
    await update.message.reply_text("–Ø —Å —Ç–æ–±–æ–π. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –∫–∞–∫ —Ç—ã.")
    context.user_data.clear()

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

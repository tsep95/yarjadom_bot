import os
import openai
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)
from gtts import gTTS

# –ö–ª—é—á–∏
openai.api_key = os.environ.get("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
MAIN_PROMPT = """... (—Ç–æ—Ç –∂–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ..."""

DIAGNOSTIC_PROMPT = """... (—Ç–æ—Ç –∂–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ..."""

MEDITATION_PROMPT = """
–¢—ã —Å–æ–∑–¥–∞—ë—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. 
–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º—è–≥–∫–æ–π, —Ç—ë–ø–ª–æ–π, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –æ–ø–∏—Å–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–π –¥—ã—Ö–∞–Ω–∏–µ, –æ–±—Ä–∞–∑—ã, —Ç–µ–ª–æ, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é, —Å–≤–µ—Ç, –∑–∞–±–æ—Ç—É. –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–æ–π ‚Äî –æ–∫–æ–ª–æ 1‚Äì2 –º–∏–Ω—É—Ç —Ç–µ–∫—Å—Ç–∞. –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, —Å–ø–æ–∫–æ–π–Ω–æ, —Å –ø–∞—É–∑–∞–º–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã.
"""

KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ü–æ–Ω—è—Ç—å —Å–µ–±—è"), KeyboardButton("–ë–µ—Å–µ–¥–∞")],
        [KeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["mode"] = "main"
    context.user_data["history"] = [{"role": "system", "content": MAIN_PROMPT}]
    await update.message.chat.send_action(action="typing")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç. –Ø —Ä—è–¥–æ–º. ü§ó\n"
        "–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. üß∏\n\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ, –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ —Å –∫–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî –ø–∏—à–∏. ‚úçÔ∏è\n"
        "–Ø –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞—é, –Ω–µ –∫—Ä–∏—Ç–∏–∫—É—é, –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è—é. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíõ\n\n"
        "üí¨ –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
        "–ú—ã –º–æ–∂–µ–º –º—è–≥–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ –Ω–∞–π—Ç–∏, —á—Ç–æ —Å —ç—Ç–∏–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. üïäÔ∏èüß†\n\n"
        "üîí –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã–π ‚Äî —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π.\n\n"
        "–•–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? üå§Ô∏èüí¨",
        reply_markup=KEYBOARD
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.chat.send_action(action="typing")
    await update.message.reply_text(
        "–Ø ‚Äî —Ç—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ó\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ, –≥—Ä—É—Å—Ç–Ω–æ, –ø—É—Å—Ç–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –ø–∏—à–∏ ‚úçÔ∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö, gently –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω—É –∏ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å –¥–æ –æ–±–ª–µ–≥—á–µ–Ω–∏—è.\n"
        "–ó–∞–¥–∞—é —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª, –∏ –∏–¥—É –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å: —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? üí¨"
    )

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.chat.send_action(action="typing")
    await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ üôà –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞–º–∏? –Ø —Ä—è–¥–æ–º ‚úçÔ∏è")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()

    if user_input.lower() == "–ø–æ–Ω—è—Ç—å —Å–µ–±—è":
        context.user_data.clear()
        context.user_data["mode"] = "diagnostic"
        context.user_data["history"] = [{"role": "system", "content": DIAGNOSTIC_PROMPT}]
        await update.message.reply_text("–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤–º–µ—Å—Ç–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç üí¨ –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ: ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª. –ù–∞—á–Ω—ë–º? ‚ú®")
        return

    if user_input.lower() == "–±–µ—Å–µ–¥–∞":
        context.user_data.clear()
        context.user_data["mode"] = "main"
        context.user_data["history"] = [{"role": "system", "content": MAIN_PROMPT}]
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–π —Ç—ë–ø–ª–æ–π –±–µ—Å–µ–¥–µ ü§ó –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å? üí¨")
        return

    if user_input.lower() == "—Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é":
        context.user_data.clear()
        context.user_data["mode"] = "meditation"
        await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è —Å–æ–∑–¥–∞–º –º–µ–¥–∏—Ç–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è üßò")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥ —Ä–µ–∂–∏–º
    if "history" not in context.user_data:
        mode = context.user_data.get("mode", "main")
        if mode == "diagnostic":
            context.user_data["history"] = [{"role": "system", "content": DIAGNOSTIC_PROMPT}]
        elif mode == "meditation":
            context.user_data["history"] = [{"role": "system", "content": MEDITATION_PROMPT}]
        else:
            context.user_data["history"] = [{"role": "system", "content": MAIN_PROMPT}]

    mode = context.user_data.get("mode", "main")
    context.user_data["history"].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-1106",
            messages=context.user_data["history"],
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()
        context.user_data["history"].append({"role": "assistant", "content": reply})
        await update.message.chat.send_action(action="typing")

        if mode == "meditation":
            tts = gTTS(text=reply, lang='ru')
            audio_path = "meditation.mp3"
            tts.save(audio_path)
            with open(audio_path, 'rb') as audio:
                await update.message.reply_voice(audio)
        else:
            await update.message.reply_text(reply[:4000])

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ GPT:", e)
        await update.message.chat.send_action(action="typing")
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ü´∂")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

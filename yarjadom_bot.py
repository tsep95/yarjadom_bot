import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –£—Å—Ç–∞–Ω–æ–≤–∏ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å (–¥–ª—è —Ç–µ—Å—Ç–∞)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai.api_key = OPENAI_API_KEY

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —ç—Ç–∞–ø–æ–≤
user_data = {}

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ —á—É—Ç–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å—Å—è, –∏ –ø–æ–º–æ—á—å –µ–º—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –æ—Å—Ç—Ä—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: —Å—Ç—Ä–∞—Ö–æ–º, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ–º, –≥–Ω–µ–≤–æ–º, –ø–µ—á–∞–ª—å—é, —Å—Ç—Ä–µ—Å—Å–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –≤–∫–ª—é—á–∞—è –ö–ü–¢.

‚ùó–ü—Ä–∏–Ω—Ü–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:
‚Äî –¢—ã –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—à—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã, –∞ –º—è–≥–∫–æ –≤—ã—è—Å–Ω—è–µ—à—å –µ–≥–æ —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã, —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞ —ç–º–æ—Ü–∏—è—Ö.
‚Äî –ó–∞–¥–∞–≤–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑ (–Ω–∞ ¬´–¥–∞/–Ω–µ—Ç¬ª), —á—Ç–æ–±—ã —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã.
‚Äî –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞—é—â–∏–º: –æ—Ç—Ä–∞–∂–∞–π —ç–º–æ—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Å–ª—ã—à–∏—à—å –∏ –ø–æ–Ω–∏–º–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫–∞.
‚Äî –°–æ–∑–¥–∞–≤–∞–π –∫–æ–º—Ñ–æ—Ä—Ç: –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "—è —Ä—è–¥–æ–º", "—Ç—ã –Ω–µ –æ–¥–∏–Ω", "—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ç–∞–∫ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å".
‚Äî –ï—Å–ª–∏ —ç–º–æ—Ü–∏–∏ –æ—Å—Ç—Ä—ã–µ, —É–≥–ª—É–±–ª—è–π—Å—è –≤ –Ω–∏—Ö, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫—É.
‚Äî –ö–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—è—Å–Ω—è—Ç—å—Å—è, –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±–æ–±—â—ë–Ω–Ω–æ–µ, –Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–∞–π —Å–µ–±–µ –º–∏–Ω—É—Ç–∫—É –æ—Ç–¥—ã—Ö–∞", "–ø–æ–≥–æ–≤–æ—Ä–∏ —Å –∫–µ–º-—Ç–æ –±–ª–∏–∑–∫–∏–º").
‚Äî –û—Ç–≤–µ—Ç—ã —Ç—ë–ø–ª—ã–µ, —á–µ–ª–æ–≤–µ—á–Ω—ã–µ.

üß† –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ‚Äî —É–∑–Ω–∞–π, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç.
2. –£–≥–ª—É–±–ª–µ–Ω–∏–µ –≤ —ç–º–æ—Ü–∏–∏ ‚Äî —É—Ç–æ—á–Ω—è–π, –∫–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç.
3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω ‚Äî –Ω–∞—á–Ω–∏ –∏—Å–∫–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã.
4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ—è—Å–Ω—è–µ—Ç—Å—è, –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±–æ–±—â—ë–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –ø–ª–∞–≤–Ω–æ –ø–æ–¥–≤–µ–¥–∏ –∫ –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É.

üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞:
‚Äî –ù–∞ —ç—Ç–∞–ø–µ 4, –∫–æ–≥–¥–∞ –Ω–∞–∑–≤–∞–Ω–∞ —ç–º–æ—Ü–∏—è –∏ –µ—Å—Ç—å –Ω–∞–º—ë–∫ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É, –¥–∞–π –æ–±–æ–±—â—ë–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å:
"–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º. üòä –ê –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è —Ç–µ–±—è, —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥ ‚Äî –¥—Ä—É–≥–æ–π –±–æ—Ç, –≥–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –ø–æ–º–æ–≥—É—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º? üíå"
"""

# –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π! üòä\n"
    "–Ø —Ç–≤–æ–π —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –≤—Å—ë, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ. ü§ó\n"
    "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? üíõ"
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_data[user_id] = {
        "history": [],
        "message_count": 0,
        "stage": 1,
        "dominant_emotion": None,
        "problem_hint": False
    }
    await update.message.reply_text(WELCOME_MESSAGE)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_input = update.message.text

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            "history": [],
            "message_count": 0,
            "stage": 1,
            "dominant_emotion": None,
            "problem_hint": False
        }

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_data[user_id]["message_count"] += 1

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data[user_id]["history"].append({"role": "user", "content": user_input})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–∏
    emotions_keywords = {
        "—Å—Ç—Ä–∞—Ö": ["—Å—Ç—Ä–∞—à–Ω–æ", "–±–æ—é—Å—å", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "–ø—É–≥–∞–µ—Ç", "–∂—É—Ç–∫–æ", "–æ–ø–∞—Å–Ω–æ"],
        "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ": ["–æ–¥–∏–Ω", "–æ–¥–∏–Ω–æ–∫–æ", "–Ω–∏–∫–æ–º—É", "–±—Ä–æ—à–µ–Ω", "–ø—É—Å—Ç–æ", "–Ω–∏–∫—Ç–æ"],
        "–≥–Ω–µ–≤": ["–±–µ—Å–∏—Ç", "–∑–ª—é—Å—å", "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–∑–ª–æ—Å—Ç—å", "–¥–æ—Å—Ç–∞–ª–æ"],
        "–ø–µ—á–∞–ª—å": ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "—Ç–æ—Å–∫–∞", "–ø–ª–∞—á—É", "–ø–µ—á–∞–ª—å–Ω–æ", "—É–Ω—ã–ª–æ"],
        "—Å—Ç—Ä–µ—Å—Å": ["–Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Å—å", "—É—Å—Ç–∞–ª", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "–¥–∞–≤–∏—Ç", "—Ç—è–∂–µ–ª–æ", "—Å—Ç—Ä–µ—Å—Å", "–ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω"]
    }
    for emotion, keywords in emotions_keywords.items():
        if any(keyword in user_input.lower() for keyword in keywords):
            user_data[user_id]["dominant_emotion"] = emotion
            break
    if not user_data[user_id]["dominant_emotion"] and any(word in user_input.lower() for word in ["–Ω–µ", "–ø–ª–æ—Ö–æ", "—Ç—è–∂–µ–ª–æ"]):
        user_data[user_id]["dominant_emotion"] = "–ø–µ—á–∞–ª—å"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º—ë–∫ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    problem_keywords = ["–ø–æ—Ç–æ–º—É —á—Ç–æ", "–∏–∑-–∑–∞", "—Å–ª—É—á–∏–ª–æ—Å—å", "—Ä–∞–±–æ—Ç–∞", "—É—á—ë–±–∞", "–¥–æ–º–∞", "—á–µ–ª–æ–≤–µ–∫", "–¥—Ä—É–∑—å—è", "—Ä–∞—Å—Å—Ç–∞–ª—Å—è", "—É–≤–æ–ª–∏–ª–∏", "–ø–æ—Ç–µ—Ä—è–ª"]
    if any(keyword in user_input.lower() for keyword in problem_keywords):
        user_data[user_id]["problem_hint"] = True

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        *user_data[user_id]["history"]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.8,
        max_tokens=200
    )

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    gpt_response = response.choices[0].message["content"]

    # –õ–æ–≥–∏–∫–∞ —ç—Ç–∞–ø–æ–≤
    message_count = user_data[user_id]["message_count"]
    stage = user_data[user_id]["stage"]
    dominant_emotion = user_data[user_id]["dominant_emotion"]
    problem_hint = user_data[user_id]["problem_hint"]

    # –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    if stage == 1 and message_count > 1:
        user_data[user_id]["stage"] = 2
    elif stage == 2 and dominant_emotion:
        user_data[user_id]["stage"] = 3
    elif stage == 3 and (problem_hint or message_count > 3):
        user_data[user_id]["stage"] = 4

    # –û–±–æ–±—â—ë–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 4
    if stage == 4 and problem_hint:
        solutions = {
            "—Å—Ç—Ä–∞—Ö": "–ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä—É –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.",
            "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ": "–ú–æ–∂–µ—Ç, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º—É-—Ç–æ –±–ª–∏–∑–∫–æ–º—É? –≠—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç, —á—Ç–æ —Ç—ã –Ω–µ –æ–¥–∏–Ω.",
            "–≥–Ω–µ–≤": "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –æ—Ç–≤–ª–µ—á—å—Å—è –Ω–∞ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Å—Ç—ã—Ç—å.",
            "–ø–µ—á–∞–ª—å": "–î–∞–π —Å–µ–±–µ –º–∏–Ω—É—Ç–∫—É –æ—Ç–¥—ã—Ö–∞, –º–æ–∂–µ—Ç, –ø–æ—Å–ª—É—à–∞–π –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É?",
            "—Å—Ç—Ä–µ—Å—Å": "–ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É ‚Äî —ç—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –ø–µ—Ä–µ–¥—ã—à–∫—É."
        }
        solution = solutions.get(dominant_emotion, "–ü–æ–ø—Ä–æ–±—É–π –¥–∞—Ç—å —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–±–æ—Ç—ã ‚Äî —ç—Ç–æ —É–∂–µ —à–∞–≥ –≤–ø–µ—Ä—ë–¥.")
        gpt_response += (
            f"\n\n{solution} –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º. üòä –ê –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è —Ç–µ–±—è, —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥ ‚Äî –¥—Ä—É–≥–æ–π –±–æ—Ç, –≥–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –ø–æ–º–æ–≥—É—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º? üíå"
        )

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    emoji_list = ["üòä", "ü§ó", "üíõ", "üåø", "üíå"]
    sentences = gpt_response.split(". ")
    if len(sentences) > 1 and sentences[-1] == "":
        sentences.pop()  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    emoji_count = min(len(sentences), 5)  # –ù–µ –±–æ–ª—å—à–µ 5 —Å–º–∞–π–ª–∏–∫–æ–≤
    gpt_response_with_emojis = ""
    for i, sentence in enumerate(sentences[:emoji_count]):
        gpt_response_with_emojis += f"{sentence.strip()}. {emoji_list[i]} "
    gpt_response_with_emojis += " ".join(sentences[emoji_count:]).strip()
    gpt_response = gpt_response_with_emojis

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data[user_id]["history"].append({"role": "assistant", "content": gpt_response})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if len(user_data[user_id]["history"]) > 10:
        user_data[user_id]["history"] = user_data[user_id]["history"][-10:]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(gpt_response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
        raise ValueError("TELEGRAM_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

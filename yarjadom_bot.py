import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –∏ –∫–ª—é—á DeepSeek
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "YOUR_DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == "YOUR_DEEPSEEK_API_KEY":
    logger.error("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
    raise ValueError("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek API key: {DEEPSEEK_API_KEY[:8]}...")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API
try:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")
    logger.info("–ö–ª–∏–µ–Ω—Ç DeepSeek API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek: {e}")
    raise

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
BASE_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û–±—â–∞–π—Å—è –∫–æ—Ä–æ—Ç–∫–æ, —Å –¥—É—à–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. 
–¶–µ–ª—å: —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. 
–ó–∞–¥–∞–≤–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ–ø–∞—é—â–∏–π –≤ —ç–º–æ—Ü–∏–∏. 
–ò—Å–ø–æ–ª—å–∑—É–π 1 —Å–º–∞–π–ª–∏–∫ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). 
–ï—Å–ª–∏ –≤—ã—è–≤–∏–ª –≥–ª—É–±–æ–∫—É—é —ç–º–æ—Ü–∏—é –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É (—Å—Ç—Ä–∞—Ö, —Å—Ç—ã–¥, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥.), –¥–æ–±–∞–≤—å [deep_reason_detected].
"""

FINAL_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥: 
- –ü–æ—Ö–≤–∞–ª–∏ —É—Å–∏–ª–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏. 
- –ù–∞–∑–æ–≤–∏ –ø—Ä–∏—á–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º—è–≥–∫–æ). 
- –ü—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ç–æ–¥ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ (–ö–ü–¢, –≥–µ—à—Ç–∞–ª—å—Ç –∏ —Ç.–¥.). 
- –ü—Ä–∏–≥–ª–∞—Å–∏: ¬´–•–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏ /extended. –Ø —Ä—è–¥–æ–º ü§ç¬ª. 
–ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè).
"""

# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
INTERMEDIATE_MESSAGE = "–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º... üåø"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å üòä. –ß—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
EXTENDED_MESSAGE = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! üåø –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –Ø —Ä—è–¥–æ–º ü§ç."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [],
        "deep_reason_detected": False,
        "last_intermediate_message_id": None
    }
    await update.message.reply_text(WELCOME_MESSAGE)

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended"""
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(EXTENDED_MESSAGE)
    else:
        await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_chat.id
    chat_id = update.effective_chat.id
    user_message = update.message.text

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if state["last_intermediate_message_id"]:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    state["history"].append({"role": "user", "content": user_message})

    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
        if state["deep_reason_detected"]:
            system_prompt = FINAL_PROMPT
        else:
            system_prompt = BASE_PROMPT

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [{"role": "system", "content": system_prompt}] + state["history"]
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        if "[deep_reason_detected]" in assistant_response:
            state["deep_reason_detected"] = True
            assistant_response = assistant_response.replace("[deep_reason_detected]", "").strip()

        state["history"].append({"role": "assistant", "content": assistant_response})
        await update.message.reply_text(assistant_response)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {assistant_response}")

        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (–Ω–µ —Ñ–∏–Ω–∞–ª), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not state["deep_reason_detected"]:
            thinking_msg = await update.message.reply_text(INTERMEDIATE_MESSAGE)
            state["last_intermediate_message_id"] = thinking_msg.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üåø. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

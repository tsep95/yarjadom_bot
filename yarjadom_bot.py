import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import asyncio
from openai import OpenAI
import logging
from typing import Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN_HERE")
DEEPSEEK_API_KEY = "sk-d08c904a63614b7b9bbe96d08445426a"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è DeepSeek API
client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, dict] = {}

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –ø–æ–Ω—è—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–æ—Ä—É. –û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, —Å —É—á–∞—Å—Ç–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—é—Ç–∞ (–Ω–µ –±–æ–ª—å—à–µ 1‚Äì2 –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ). 

–¶–µ–ª—å: —á–µ—Ä–µ–∑ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –º—è–≥–∫–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ—Å–æ–∑–Ω–∞–Ω–∏—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –≤—ã–≤–æ–¥—É —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.

–í –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ:
‚Äì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –ø—Ä–æ—è–≤–ª—è–π —É—á–∞—Å—Ç–∏–µ.
‚Äì –ó–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –º–æ–≥ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —Å–µ–±—è.
‚Äì –°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å—Ç–∏–ª—å.

–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ç–æ–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞—Å—Å–∫–∞–∑–∞–ª.

–ü—Ä–∏–º–µ—Ä–Ω—ã–π —à–∞–±–ª–æ–Ω —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

---
–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è –∏ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç —Ä–∞–∑–±–æ—Ä ‚Äî —ç—Ç–æ —É–∂–µ —à–∞–≥ –∫ —Å–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–º—É! üí´

–ü–æ —Ç–æ–º—É, —á—Ç–æ —Ç—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª, —è –≤–∏–∂—É:  
[–í—Å—Ç–∞–≤—å –º—è–≥–∫–∏–π –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ —á—É–≤—Å—Ç–≤–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è].  
–≠—Ç–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã, –∏ –æ–Ω–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ üå± ‚Äî –æ–Ω–∏ —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–Ω–∏–º–∞—Ç—å.

[–£–∫–∞–∂–∏, –∫–∞–∫–∞—è –≥–ª—É–±–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –±—ã–ª–∞ –≤—ã—è–≤–ª–µ–Ω–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–∞—Ö –æ—Ü–µ–Ω–∫–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø–æ—Ç–µ—Ä—è —Å–º—ã—Å–ª–∞, –∞–ø–∞—Ç–∏—è –∏ —Ç.–ø.]  
–û–±—ã—á–Ω–æ —Å —ç—Ç–∏–º –ø–æ–º–æ–≥–∞–µ—Ç –º–µ—Ç–æ–¥ [–≤—Å—Ç–∞–≤—å –º–µ—Ç–æ–¥ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ –ø—Ä–æ–±–ª–µ–º–µ] ‚Äî –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Å–µ–±—è, –≤–µ—Ä–Ω—É—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ —Ç—ã –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ ‚ú®.

–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –∫–æ–≥–¥–∞ —Ç—Ä—É–¥–Ω–æ, –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç—É–¥–∞, –≥–¥–µ —Ç–µ–ø–ª–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ ü§ó.  
–¢—ã –¥–æ—Å—Ç–æ–∏–Ω –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º ‚Äî –Ω–µ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º, –∞ —É–∂–µ —Å–µ–π—á–∞—Å üíõ.

–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∫–æ–ø–Ω—É—Ç—å –≥–ª—É–±–∂–µ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é üöÄ.  
–¢–∞–º —è –±—É–¥—É —Ä—è–¥–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–º–æ–≥–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ —Ç–µ–ø–ª–æ –≤–Ω—É—Ç—Ä–∏ üåû.

---

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:
‚Äì –ù–µ –¥–µ–ª–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞–Ω—å—à–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.  
‚Äì –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ä–∞—Å—Å–∫–∞–∑ –∏ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.  
‚Äì –ë—É–¥—å –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, —Å –¥—É—à–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç ü§ó –Ø —Ä—è–¥–æ–º!\n"
    "–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.\n\n"
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ üåß ‚Äî –ø–∏—à–∏, —è —Ç—É—Ç.\n"
    "–ù–µ –±—É–¥—É –æ—Å—É–∂–¥–∞—Ç—å –∏–ª–∏ –¥–∞–≤–∏—Ç—å üíõ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂—É.\n\n"
    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –Ω–∏–∂–µ üåø –∏ –ø–æ–π–¥—ë–º –≤–º–µ—Å—Ç–µ!"
)

# –°–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
EMOTIONS = [
    {"text": "–ù–µ –º–æ–≥—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –∂–¥—É –ø–ª–æ—Ö–æ–≥–æ üåÄ", "callback": "anxiety"},
    {"text": "–ù–µ—Ç —Å–∏–ª, —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –ª–µ–∂–∞—Ç—å üõå", "callback": "apathy"},
    {"text": "–í—Å—ë —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, –≤–∑—Ä—ã–≤–∞—é—Å—å –∏–∑-–∑–∞ –º–µ–ª–æ—á–µ–π üò†", "callback": "anger"},
    {"text": "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ª–∏—à–Ω–∏–º, –Ω–µ —Ç–∞–∫–∏–º –∫–∞–∫ –≤—Å–µ üåß", "callback": "self_doubt"},
    {"text": "–í–Ω—É—Ç—Ä–∏ –ø—É—Å—Ç–æ, –≤—Å—ë –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ üåå", "callback": "emptiness"},
    {"text": "–û–¥–∏–Ω–æ–∫–æ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ä—è–¥–æ–º –ª—é–¥–∏ üåë", "callback": "loneliness"},
    {"text": "–ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë –∏—Å–ø–æ—Ä—Ç–∏–ª, –≤–∏–Ω—é —Å–µ–±—è üíî", "callback": "guilt"},
    {"text": "–ù–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å, –∑–∞–ø—É—Ç–∞–ª—Å—è ü§Ø", "callback": "indecision"}
]

SUBSCRIBE_URL = "https://example.com/subscribe"

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_emotion_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton(e["text"], callback_data=e["callback"])] for e in EMOTIONS])

def create_start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏–º", callback_data="start_talk")]])

def create_subscribe_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é", url=SUBSCRIBE_URL)]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    user_data[user_id] = {
        "history": [],
        "step": 0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å —à–∞–≥–∞ 0, –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —à–∞–≥–æ–º 1
    }
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=create_start_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏
async def handle_emotion_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.message.chat.id
    callback_data = query.data
    
    emotion = next((e for e in EMOTIONS if e["callback"] == callback_data), None)
    if emotion:
        full_emotion = emotion["text"]
        user_data[user_id]["history"].append({"role": "user", "content": full_emotion})
        user_data[user_id]["step"] = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ 1 –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ handle_message
        response = f"–ü–æ–Ω–∏–º–∞—é, –∫–∞–∫ —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ ‚Äî {full_emotion.split(' ')[0].lower()}... üòî –ß—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç–µ–±—è –≤ —ç—Ç–æ–º —Ç—Ä–µ–≤–æ–∂–∏—Ç? üåø"
        user_data[user_id]["history"].append({"role": "assistant", "content": response})
        await query.edit_message_text(response)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def handle_start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.message.chat.id
    
    if query.data == "start_talk":
        user_data[user_id]["step"] = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ 1
        response = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª—Å—è –Ω–∞—á–∞—Ç—å üòä –ß—Ç–æ —Å–µ–π—á–∞—Å —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç –∏–ª–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–≤–æ–∏ –º—ã—Å–ª–∏? üåø"
        user_data[user_id]["history"].append({"role": "assistant", "content": response})
        await query.edit_message_text(response)
    await query.answer()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_long_message(chat_id: int, text: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    MAX_LENGTH = 4096
    for i in range(0, len(text), MAX_LENGTH):
        await context.bot.send_message(chat_id=chat_id, text=text[i:i + MAX_LENGTH])
        await asyncio.sleep(0.3)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    user_input = update.message.text
    
    if user_id not in user_data:
        await start(update, context)
        return

    state = user_data[user_id]
    state["history"].append({"role": "user", "content": user_input})
    state["step"] += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    
    thinking_msg = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º... üåø")
    
    try:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}] + state["history"]
        completion = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            temperature=0.7,
            timeout=30
        )
        full_response = completion.choices[0].message.content
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —à–∞–≥–∏ (–≥—Ä—É–±–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è DeepSeek)
        steps = full_response.split("\n\n")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —à–∞–≥–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
        current_step = min(state["step"] - 1, 4)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —à–∞–≥–æ–≤ (0-4 –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö)
        response = steps[current_step] if current_step < len(steps) else steps[-1]  # –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —à–∞–≥–µ 5
        if state["step"] == 5:
            response += "\n\n*–ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é. –Ø —Ä—è–¥–æ–º ü§ç*"
            await context.bot.send_message(
                chat_id=user_id,
                text=response,
                reply_markup=create_subscribe_keyboard()
            )
            del user_data[user_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        else:
            state["history"].append({"role": "assistant", "content": response})
            await send_long_message(user_id, response, context)
        
        await context.bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message –¥–ª—è user_id {user_id}: {str(e)}")
        response = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –º–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ.\n\n–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üåø"
        await context.bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
        await send_long_message(user_id, response, context)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_emotion_choice, pattern="^(anxiety|apathy|anger|self_doubt|emptiness|loneliness|guilt|indecision)$"))
    application.add_handler(CallbackQueryHandler(handle_start_choice, pattern="^start_talk$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not OPENAI_API_KEY:
    logger.error("OpenAI API key –Ω–µ –∑–∞–¥–∞–Ω!")
    raise ValueError("OpenAI API key –Ω–µ –∑–∞–¥–∞–Ω!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI API key: {OPENAI_API_KEY[:8]}... (–¥–ª–∏–Ω–∞: {len(OPENAI_API_KEY)})")

if not TELEGRAM_TOKEN:
    logger.error("Telegram token –Ω–µ –∑–∞–¥–∞–Ω!")
    raise ValueError("Telegram token –Ω–µ –∑–∞–¥–∞–Ω!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram token: {TELEGRAM_TOKEN[:8]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
try:
    client = OpenAI(api_key=OPENAI_API_KEY)
    logger.info("–ö–ª–∏–µ–Ω—Ç OpenAI API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI: {e}")
    raise

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ü—Ä–æ–º–ø—Ç—ã
BASE_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π.  
–¶–µ–ª—å: –º—è–≥–∫–æ —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ 1-2 –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç —á–µ–ª–æ–≤–µ–∫–∞. –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–Ω: "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª—Å—è –Ω–∞—á–∞—Ç—å ‚Äî —ç—Ç–æ —É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏. –ú—ã –ø–æ–π–¥—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –±–µ–∑ —Å–ø–µ—à–∫–∏, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ. –ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"  
–ü–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≤ —Å—Ç–∏–ª–µ: "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –Ω–µ –≤—Å–µ–≥–¥–∞ –ª–µ–≥–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. –ë—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ, –∏ —Ç—Ä—É–¥–Ω–æ –ø–æ–Ω—è—Ç—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, —á—Ç–æ —Ç—ã –æ—â—É—â–∞–µ—à—å –≤ —Ç–µ–ª–µ –∏–ª–∏ –≥–æ–ª–æ–≤–µ? üå±"  
–û—Å—Ç–∞–≤–ª—è–π —Ü–µ–ª—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–π \n\n).  
–ó–∞–¥–∞–≤–∞–π 1-2 –≤–æ–ø—Ä–æ—Å–∞ –∑–∞ —Ä–∞–∑, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤.  
–ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ü§ç üå± üåßÔ∏è ü§ù üåª üïäÔ∏è ü§ó üåû üå≥ üåü üçÉ üåà üåô üíõ üåä üåë üí´ üß© ‚ú®.  
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ (–º–µ–Ω–µ–µ 10 —Å–ª–æ–≤), —Å—á–∏—Ç–∞–π, —á—Ç–æ –≥–ª—É–±–æ–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –±–ª–∏–∑–∫–∞, –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.
"""

FINAL_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:  
–ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏, —É–ø–æ–º—è–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è, –≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è, –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–π), –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏.  
–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –∫–∞–∫ —Å–ø—É—Ç–Ω–∏–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ.  
–ü–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤ —Å—Ç–∏–ª–µ: "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –Ω–µ –≤—Å–µ–≥–¥–∞ –ª–µ–≥–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. –ë—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ, –∏ —Ç—Ä—É–¥–Ω–æ –ø–æ–Ω—è—Ç—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, —á—Ç–æ —Ç—ã –æ—â—É—â–∞–µ—à—å –≤ —Ç–µ–ª–µ –∏–ª–∏ –≥–æ–ª–æ–≤–µ? üå±"  
–û—Å—Ç–∞–≤–ª—è–π —Ü–µ–ª—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–π \n\n).  
–ü—Ä–∏–º–µ—Ä:  
"–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫ –º–Ω–æ–≥–æ —á—É–≤—Å—Ç–≤ —Å–∫–æ–ø–∏–ª–æ—Å—å –≤–Ω—É—Ç—Ä–∏.  
–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è –º–æ–≥–ª–∞ –±—ã –ø–æ–º–æ—á—å –º—è–≥–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–∏—Ö.  
–ú–æ—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –≤ —ç—Ç–æ–º –ø—É—Ç–∏.  
–ù–∞–∂–º–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üåü"  
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ü§ç üå± üåßÔ∏è ü§ù üåª üïäÔ∏è ü§ó üåû üå≥ üåü üçÉ üåà üåô üíõ üåä üåë üí´ üß© ‚ú®.
"""

INTERMEDIATE_MESSAGE = "–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º üçÉ"
WELCOME_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –º—è–≥–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ —Ç–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö ü§ç. –ì–æ—Ç–æ–≤ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"
START_CONVERSATION_MESSAGE = """
–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª—Å—è –Ω–∞—á–∞—Ç—å ‚Äî —ç—Ç–æ —É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ.  
–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏.  
–ú—ã –ø–æ–π–¥—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –±–µ–∑ —Å–ø–µ—à–∫–∏, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ.  
–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
"""
DETAILED_MESSAGE = """
–≠—Ç–æ —Ç–≤–æ—è –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –æ–ø–æ—Ä–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.  
–ß—Ç–æ–±—ã —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –ª–µ–≥—á–µ, —Å–ø–æ–∫–æ–π–Ω–µ–µ –∏ —Ä–∞–¥–æ—Å—Ç–Ω–µ–µ ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.  
–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:  
–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —Ç—ë–ø–ª–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –¥–Ω—è.  
–ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä ‚Äî –º—è–≥–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–Ω—è.  
–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏, –≤–∏–Ω—ã, –∞–ø–∞—Ç–∏–∏.  
SOS-–ø–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã.  
–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.  
–ü—Å–∏—Ö–æ-–∫–≤–µ—Å—Ç—ã: —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –≥—Ä–∞–Ω–∏—Ü—ã.  
–¶–µ–ª—å ‚Äî –¥–µ–ª–∞—Ç—å —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.  
499 ‚ÇΩ –≤ –º–µ—Å—è—Ü. –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [],
        "question_count": 0,
        "short_answers": 0,
        "deep_reason_detected": False,
        "dialog_ended": False,
        "last_intermediate_message_id": None
    }
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏–º", callback_data="start_conversation")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "start_conversation":
        state = user_states[user_id]
        state["history"].append({"role": "assistant", "content": START_CONVERSATION_MESSAGE})
        await query.edit_message_text(START_CONVERSATION_MESSAGE)
    elif query.data == "tell_me_more":
        keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url="https://your-payment-link.com")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(DETAILED_MESSAGE, reply_markup=reply_markup)

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(DETAILED_MESSAGE)
    else:
        await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    chat_id = update.effective_chat.id
    user_message = update.message.text.lower()

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]
    if state["dialog_ended"]:
        await update.message.reply_text("–ú—ã —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º üåü. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ? –ù–∞–∂–º–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ' –≤—ã—à–µ.")
        return

    state["history"].append({"role": "user", "content": user_message})
    state["question_count"] += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(user_message.split()) < 10:
        state["short_answers"] += 1
    else:
        state["short_answers"] = 0

    try:
        thinking_msg = await update.message.reply_text(INTERMEDIATE_MESSAGE)
        state["last_intermediate_message_id"] = thinking_msg.message_id

        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–∏–Ω–∞–ª—É: 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ä—è–¥ –∏–ª–∏ "—Å–ø–∞—Å–∏–±–æ"/"—Ö–≤–∞—Ç–∏—Ç"
        if state["short_answers"] >= 3 or "—Å–ø–∞—Å–∏–±–æ" in user_message or "—Ö–≤–∞—Ç–∏—Ç" in user_message:
            system_prompt = FINAL_PROMPT
        else:
            system_prompt = BASE_PROMPT

        messages = [{"role": "system", "content": system_prompt}] + state["history"]
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content

        if state["last_intermediate_message_id"]:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None

        if state["short_answers"] >= 3 or "—Å–ø–∞—Å–∏–±–æ" in user_message or "—Ö–≤–∞—Ç–∏—Ç" in user_message:
            state["deep_reason_detected"] = True
            state["dialog_ended"] = True
            keyboard = [[InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="tell_me_more")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(assistant_response, reply_markup=reply_markup)
        else:
            await update.message.reply_text(assistant_response)

        state["history"].append({"role": "assistant", "content": assistant_response})
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {assistant_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {str(e)}")
        if state["last_intermediate_message_id"]:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None
        await update.message.reply_text(f"–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üåø. –û—à–∏–±–∫–∞: {str(e)}. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

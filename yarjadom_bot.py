import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –∏ –∫–ª—é—á DeepSeek
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "sk-d08c904a63614b7b9bbe96d08445426a")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == "YOUR_DEEPSEEK_API_KEY":
    logger.error("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
    raise ValueError("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek API key: {DEEPSEEK_API_KEY[:8]}...")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API
try:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")
    logger.info("–ö–ª–∏–µ–Ω—Ç DeepSeek API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek: {e}")
    raise

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
SYSTEM_PROMPTS = {
    1: """
    –¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ù–∞—á–Ω–∏ —Å —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. 
    –£—Ç–æ—á–Ω–∏, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —á–µ–ª–æ–≤–µ–∫–∞, –∑–∞–¥–∞–π –Ω–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ß—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç?"). 
    –ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). –°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π–Ω—ã–π —Ç–æ–Ω.
    """,
    2: """
    –¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–æ—è–≤–∏ —É—á–∞—Å—Ç–∏–µ, –ø–æ–º–æ–≥–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–∞–∫ –æ–Ω–æ –æ—â—É—â–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å, –∫–∞–∫ –≤–ª–∏—è–µ—Ç. 
    –ó–∞–¥–∞–π —É–≥–ª—É–±–ª—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏?"). 
    –ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º.
    """,
    3: """
    –¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–µ–¥–ª–æ–∂–∏ –≥–∏–ø–æ—Ç–µ–∑—É –æ–± —ç–º–æ—Ü–∏–∏ (—Å—Ç—Ä–∞—Ö, –∞–ø–∞—Ç–∏—è, —Ç—Ä–µ–≤–æ–≥–∞ –∏ —Ç.–¥.), –ø–æ–º–æ–≥–∏ –æ—Å–æ–∑–Ω–∞—Ç—å. 
    –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —á—É–≤—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ß—Ç–æ –º–æ–≥–ª–æ —ç—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å?"). 
    –ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). –°–æ—Ö—Ä–∞–Ω—è–π —Ç–µ–ø–ª–æ.
    """,
    4: """
    –¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü–æ–¥–≤–µ–¥–∏ –∫ –≥–ª—É–±–∏–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä–æ—à–ª–æ–µ, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å). 
    –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑—ã–≤–∞—é—â–∏–π –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å –ø—Ä–æ—à–ª—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë—ã–ª –ª–∏ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?"). 
    –ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). –ë—É–¥—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º.
    """,
    5: """
    –¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 
    - –ü–æ—Ö–≤–∞–ª–∏ —É—Å–∏–ª–∏—è, –¥–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫—É. 
    - –û–ø–∏—à–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏—á–∏–Ω—É (–º—è–≥–∫–æ, –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è). 
    - –£–∫–∞–∂–∏ –º–µ—Ç–æ–¥ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ (–ö–ü–¢, –≥–µ—à—Ç–∞–ª—å—Ç –∏ —Ç.–¥.). 
    - –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: ¬´–ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /extended. –Ø —Ä—è–¥–æ–º ü§ç¬ª. 
    –ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè).
    """
}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å üòä. –ß—Ç–æ —Å–µ–π—á–∞—Å —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
EXTENDED_MESSAGE = (
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è –º–Ω–µ ‚Äî —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –∫–æ–ø–Ω—É—Ç—å –≥–ª—É–±–∂–µ! üåø\n\n"
    "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –Ω–∞–π—Ç–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ü§ç."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [],
        "message_count": 0
    }
    await update.message.reply_text(WELCOME_MESSAGE)

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended"""
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(EXTENDED_MESSAGE)
    else:
        await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_chat.id
    user_message = update.message.text

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]
    state["message_count"] += 1
    step = min(state["message_count"], 5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —à–∞–≥–∞–º–∏
    state["history"].append({"role": "user", "content": user_message})

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
        messages = [{"role": "system", "content": SYSTEM_PROMPTS[step]}] + state["history"]
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content
        state["history"].append({"role": "assistant", "content": assistant_response})
        
        await update.message.reply_text(assistant_response)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {step} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {assistant_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üåø. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

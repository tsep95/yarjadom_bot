import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import asyncio
from openai import OpenAI

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = "–í–ê–®_API_–ö–õ–Æ–ß"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

user_data = {}

SYSTEM_PROMPT = """
–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –≤ Telegram, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ä–æ–ª–∏ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∑–∞ 5 —à–∞–≥–æ–≤ –ø–æ–º–æ—á—å –æ—Å–æ–∑–Ω–∞—Ç—å –≥–ª—É–±–∏–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞.

–û—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
‚Ä¢ –ó–∞–¥–∞–≤–∞–π —Ä–æ–≤–Ω–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏.
‚Ä¢ –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–≤–æ–π, –∏—Å–∫—Ä–µ–Ω–Ω–∏–π, –¥–æ–±—Ä—ã–π, —Å —ç–º–æ–¥–∑–∏.
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã –∏ –∑–≤—ë–∑–¥–æ—á–∫–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.
‚Ä¢ –ü–æ—Å–ª–µ –ø—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ —Ç–µ—Ä–∞–ø–∏–∏ –∏ —É–ø–æ–º—è–Ω–∏ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é.
‚Ä¢ –≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∂–∏–≤—ã–º–∏ –∏ —É–º–µ—Å—Ç–Ω—ã–º–∏.
"""

WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç ü§ó –Ø —Ä—è–¥–æ–º!\n"
    "–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ üß∏, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.\n\n"
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ üåß ‚Äî –ø–∏—à–∏, —è —Ç—É—Ç.\n"
    "–ù–µ –±—É–¥—É –æ—Å—É–∂–¥–∞—Ç—å –∏–ª–∏ –¥–∞–≤–∏—Ç—å üíõ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂—É.\n\n"
    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üåø"
)

EMOTIONS = [
    {"text": "–ù–µ –º–æ–≥—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –∂–¥—É —á–µ–≥–æ-—Ç–æ –ø–ª–æ—Ö–æ–≥–æ üåÄ", "callback": "anxiety"},
    {"text": "–ù–µ—Ç —Å–∏–ª, —Ö–æ—á—É –ø—Ä–æ—Å—Ç–æ –ª–µ–∂–∞—Ç—å üõå", "callback": "apathy"},
    {"text": "–†–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –≤—Å—ë –ø–æ–¥—Ä—è–¥! üò†", "callback": "anger"},
    {"text": "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ —Ç–∞–∫–∏–º, –ª–∏—à–Ω–∏–º üåß", "callback": "self_doubt"},
    {"text": "–í–Ω—É—Ç—Ä–∏ –ø—É—Å—Ç–æ—Ç–∞, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ üåå", "callback": "emptiness"},
    {"text": "–û–¥–∏–Ω–æ–∫–æ –¥–∞–∂–µ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π üåë", "callback": "loneliness"},
    {"text": "–ß—É–≤—Å—Ç–≤—É—é –≤–∏–Ω—É –∑–∞ –≤—Å—ë üíî", "callback": "guilt"},
    {"text": "–ù–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ ü§Ø", "callback": "indecision"}
]

EMOTION_RESPONSES = {
    "anxiety": "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–∏—Å–∏—Ç –≤ –≤–æ–∑–¥—É—Ö–µ üå™Ô∏è –ß—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–µ–π—á–∞—Å?",
    "apathy": "–°–æ–≤—Å–µ–º –Ω–µ—Ç —Å–∏–ª –¥–∞–∂–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–µ—â–∏ üå´Ô∏è –ß—Ç–æ –≥–ª–æ–∂–µ—Ç —Ç–µ–±—è –≤ —ç—Ç–∏ –º–∏–Ω—É—Ç—ã?",
    "anger": "–ü–æ—Ö–æ–∂–µ, –≤–Ω—É—Ç—Ä–∏ –≤—Å—ë –∫–∏–ø–∏—Ç üî• –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç?",
    "self_doubt": "–û—â—É—â–µ–Ω–∏–µ, –±—É–¥—Ç–æ —Ç—ã –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ üòî –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–∞—â–µ –≤—Å–µ–≥–æ?",
    "emptiness": "–ü—É—Å—Ç–æ—Ç–∞, –∫–æ—Ç–æ—Ä—É—é —Å–ª–æ–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å üåå –ß—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç –≥–ª—É–±–∂–µ –≤—Å–µ–≥–æ?",
    "loneliness": "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –¥–∞–≤–∏—Ç—å –∏–∑–Ω—É—Ç—Ä–∏ üåë –ü–æ–¥–µ–ª–∏—Å—å, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
    "guilt": "–í–∏–Ω–∞ –¥–∞–≤–∏—Ç –Ω–∞ –ø–ª–µ—á–∏ üíî –ß—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –≤–∏–Ω–∏—Ç—å —Å–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "indecision": "–ò–Ω–æ–≥–¥–∞ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä ü§Ø –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
}

def create_emotion_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton(e["text"], callback_data=e["callback"])] for e in EMOTIONS])

def create_more_info_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_data[user_id] = {"history": [], "stage": 1, "emotion": None}
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=create_emotion_keyboard())

async def handle_emotion_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.message.chat.id
    callback_data = query.data
    emotion_text = next(e["text"] for e in EMOTIONS if e["callback"] == callback_data)
    
    user_data[user_id].update({"emotion": emotion_text, "stage": 2})
    user_data[user_id]["history"].append({"role": "user", "content": emotion_text})

    response = EMOTION_RESPONSES.get(callback_data, "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å? üòä")
    user_data[user_id]["history"].append({"role": "assistant", "content": response})

    await query.edit_message_text(response)
    await query.answer()

async def send_long_message(chat_id, text, context, reply_markup=None):
    MAX_LENGTH = 4096
    parts = [text[i:i + MAX_LENGTH] for i in range(0, len(text), MAX_LENGTH)]
    for part in parts[:-1]:
        await context.bot.send_message(chat_id, part)
        await asyncio.sleep(0.3)
    await context.bot.send_message(chat_id, parts[-1], reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_input = update.message.text

    if user_id not in user_data:
        await start(update, context)
        return

    state = user_data[user_id]
    state["history"].append({"role": "user", "content": user_input})
    stage = state["stage"]

    thinking_msg = await update.message.reply_text("–°–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ... üåø")

    try:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}] + state["history"]
        completion = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            temperature=0.7,
            timeout=15
        )
        response = completion.choices[0].message.content

        if stage < 5:
            state["stage"] += 1
            reply_markup = None
        else:
            reply_markup = create_more_info_keyboard()

        state["history"].append({"role": "assistant", "content": response})

    except Exception as e:
        response = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? üòÖ"
        print(f"–û—à–∏–±–∫–∞: {e}")
        reply_markup = None

    finally:
        await context.bot.delete_message(user_id, thinking_msg.message_id)

    await send_long_message(user_id, response, context, reply_markup)

async def handle_more_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–í –º–æ–µ–π –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã —Å–º–æ–∂–µ–º –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏ üåü\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è! üåø"
    )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_emotion_choice, pattern="^(anxiety|apathy|anger|self_doubt|emptiness|loneliness|guilt|indecision)$"))
    app.add_handler(CallbackQueryHandler(handle_more_info, pattern="^more_info$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    app.run_polling()

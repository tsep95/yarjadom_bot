import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –∏ –∫–ª—é—á DeepSeek
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "sk-d08c904a63614b7b9bbe96d08445426a")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
if not DEEPSEEK_API_KEY or DEEPSEEK_API_KEY == "YOUR_DEEPSEEK_API_KEY":
    logger.error("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
    raise ValueError("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek API key: {DEEPSEEK_API_KEY[:8]}...")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API
try:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")
    logger.info("–ö–ª–∏–µ–Ω—Ç DeepSeek API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek: {e}")
    raise

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
BASE_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û–±—â–∞–π—Å—è —Å –¥—É—à–æ–π, –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. 
–¶–µ–ª—å: –≤—ã—Å–ª—É—à–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ–Ω—è—Ç—å –µ–≥–æ —á—É–≤—Å—Ç–≤–∞ –∏ –º—è–≥–∫–æ —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ –Ω–∏—Ö —á–µ—Ä–µ–∑ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. 
–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ–±—ã –∫–æ–ø–Ω—É—Ç—å –≥–ª—É–±–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ß—Ç–æ —ç—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç?", "–ö–æ–≥–¥–∞ —Ç—ã —ç—Ç–æ –≤–ø–µ—Ä–≤—ã–µ –∑–∞–º–µ—Ç–∏–ª?"). 
–ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). –°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ç—ë–ø–ª—ã–π —Ç–æ–Ω.
–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –¥–æ—Å—Ç–∏–≥ –≥–ª—É–±–∏–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Ç—Ä–∞–≤–º–∞, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å), –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü [deep_reason_detected].
"""

FINAL_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π –±–µ—Å–µ–¥—ã —Å–¥–µ–ª–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 
- –ü–æ—Ö–≤–∞–ª–∏ —É—Å–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞, –¥–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫—É. 
- –û–ø–∏—à–∏, —á—Ç–æ —Å –Ω–∏–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ –ø–æ—á–µ–º—É (–º—è–≥–∫–æ, –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è). 
- –£–∫–∞–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ (–ö–ü–¢, –≥–µ—à—Ç–∞–ª—å—Ç, –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑, —Ç–µ–ª–µ—Å–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏ —Ç.–¥.). 
- –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: ¬´–ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /extended. –Ø —Ä—è–¥–æ–º ü§ç¬ª. 
–ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞ (üòä, üåø, ‚ú®, ü§ç, ‚òÄÔ∏è, üôè). –ë—É–¥—å –∑–∞–±–æ—Ç–ª–∏–≤—ã–º –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º.
"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å üòä. –ß—Ç–æ —Å–µ–π—á–∞—Å —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
EXTENDED_MESSAGE = (
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è –º–Ω–µ ‚Äî —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –≤—Å—ë —Ä–∞–∑–æ–±—Ä–∞—Ç—å! üåø\n\n"
    "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Ç–µ–ø–ª–æ –≤–Ω—É—Ç—Ä–∏ ü§ç."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [],
        "deep_reason_detected": False
    }
    await update.message.reply_text(WELCOME_MESSAGE)

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended"""
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(EXTENDED_MESSAGE)
    else:
        await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_chat.id
    user_message = update.message.text

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]
    state["history"].append({"role": "user", "content": user_message})

    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state["deep_reason_detected"]:
            system_prompt = FINAL_PROMPT
        else:
            system_prompt = BASE_PROMPT

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
        messages = [{"role": "system", "content": system_prompt}] + state["history"]
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –±–æ—Ç –≥–ª—É–±–∏–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
        if "[deep_reason_detected]" in assistant_response:
            state["deep_reason_detected"] = True
            assistant_response = assistant_response.replace("[deep_reason_detected]", "").strip()

        state["history"].append({"role": "assistant", "content": assistant_response})
        await update.message.reply_text(assistant_response)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {assistant_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üåø. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

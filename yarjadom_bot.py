import os
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import random
import asyncio
import re

# –£—Å—Ç–∞–Ω–æ–≤–∏ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å (–¥–ª—è —Ç–µ—Å—Ç–∞)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai.api_key = OPENAI_API_KEY

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —ç—Ç–∞–ø–æ–≤
user_data = {}

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –≤–µ–¥—É—â–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –±–µ—Å–µ–¥—ã. –î–æ–±–∞–≤–ª—è–π –æ–¥–∏–Ω —Å–º–∞–π–ª–∏–∫ –ø–æ—Å–ª–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º—ã—Å–ª–µ–π, –≥–¥–µ —ç—Ç–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç —ç–º–æ—Ü–∏—é, –≤—ã–±–∏—Ä–∞—è –µ–≥–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (üòä, ü§ó, üíõ, üåø, üíå, üòå, üå∏, ‚ú®, ‚òÄÔ∏è, üåü). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–∞–ª—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º. –í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—è–≥–∫–∏–µ —ç–º–æ–¥–∑–∏ (üòä, üíô, üåø), –∞ –¥–ª—è —Ç—Ä—É–¥–Ω—ã—Ö —Ç–µ–º ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ (ü§ó, ‚ù§Ô∏è, üôè).

–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å —É—é—Ç–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –∏ –ø–æ–º–æ—á—å –µ–º—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, –∂–∏–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –∏ –∂–∏—Ç–µ–π—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å.

‚ùó–ü—Ä–∏–Ω—Ü–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:
‚Äî –ù–µ –≥–∞–¥–∞–π, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –∞ –º—è–≥–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞–π, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —á—É–≤—Å—Ç–≤—É–µ—Ç –∏ –ø–æ—á–µ–º—É.
‚Äî –ó–∞–¥–∞–≤–∞–π –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑ (–Ω–∞ ¬´–¥–∞/–Ω–µ—Ç¬ª), —á—Ç–æ–±—ã —Ä–∞–∑–≥–æ–≤–æ—Ä —à—ë–ª –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
‚Äî –ë—É–¥—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º: –æ—Ç—Ä–∞–∂–∞–π —á—É–≤—Å—Ç–≤–∞ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä—è–¥–æ–º", "–±—ã–≤–∞–µ—Ç –∂–µ —Ç–∞–∫", "–≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è".
‚Äî –ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏—é, –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç—ë–ø–ª–æ–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞.
‚Äî –û—Ç–≤–µ—Ç—ã —Ç—ë–ø–ª—ã–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ, —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –æ—Ç—Ç–µ–Ω–∫–æ–º.

üß† –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
1. –ù–∞—á–∞–ª–æ ‚Äî –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∏ —É–∑–Ω–∞–π, –∫–∞–∫ –¥–µ–ª–∞ —É —á–µ–ª–æ–≤–µ–∫–∞.
2. –≠–º–æ—Ü–∏–∏ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞–∑–≤–∞—Ç—å, —á—Ç–æ –æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞: –¢—Ä–µ–≤–æ–≥–∞, –ê–ø–∞—Ç–∏—è / –Ω–µ—Ç —Å–∏–ª, –ó–ª–æ—Å—Ç—å / —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, ‚Äú–°–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫‚Äù, –ü—É—Å—Ç–æ—Ç–∞ / –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å, –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, –í–∏–Ω–∞. –†–µ–∞–≥–∏—Ä—É–π —Ç–µ–ø–ª–æ.
3. –ü—Ä–∏—á–∏–Ω–∞ ‚Äî —Ä–∞–∑–±–µ—Ä–∏—Å—å, –∏–∑-–∑–∞ —á–µ–≥–æ —ç—Ç–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–Ω.
4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à—É—é –ø–æ–º–æ—â—å.

üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞:
‚Äî –ù–∞ —ç—Ç–∞–ø–µ 4 –¥–∞–π —Ç—ë–ø–ª–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–ø—Ä–æ–±—É–π –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ üåø").
‚Äî –î–æ–±–∞–≤—å –ø–µ—Ä–µ—Ö–æ–¥: "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ–º –ø–æ–±–æ–ª—Ç–∞—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–±–æ–ª—å—à–µ ‚Äî —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥, –¥—Ä—É–≥–æ–π –±–æ—Ç, –≥–¥–µ –ø—Ä–æ—Ñ–∏ –ø–æ–º–æ–≥—É—Ç –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üòå".
"""

# –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç, —è —Ä—è–¥–æ–º. ü§ó\n"
    "–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. üß∏\n"
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–∏—à–∏. ‚úçÔ∏è\n"
    "–Ø –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞—é, –Ω–µ –∫—Ä–∏—Ç–∏–∫—É—é, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíõ\n"
    "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá"
)

# –°–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π
EMOTIONS = [
    "–¢—Ä–µ–≤–æ–≥–∞", "–ê–ø–∞—Ç–∏—è / –Ω–µ—Ç —Å–∏–ª", "–ó–ª–æ—Å—Ç—å / —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", 
    "–°–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫", "–ü—É—Å—Ç–æ—Ç–∞ / –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å", 
    "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–í–∏–Ω–∞"
]

# –û—Ç–≤–µ—Ç—ã —Å "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–µ—Ä–∫–∞–ª–æ–º"
EMOTION_RESPONSES = {
    "–¢—Ä–µ–≤–æ–≥–∞": "–¢—Ä–µ–≤–æ–≥–∞? –≠—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ –≤–Ω—É—Ç—Ä–∏ –≤—Å—ë —Å–∂–∏–º–∞–µ—Ç—Å—è –∏ –Ω–µ –¥–∞—ë—Ç –ø–æ–∫–æ—è, –¥–∞? –ß—Ç–æ –µ—ë –≤—ã–∑—ã–≤–∞–µ—Ç?",
    "–ê–ø–∞—Ç–∏—è / –Ω–µ—Ç —Å–∏–ª": "–ê–ø–∞—Ç–∏—è? –¢–∞–∫–æ–µ —á—É–≤—Å—Ç–≤–æ, –±—É–¥—Ç–æ —Å–∏–ª —Å–æ–≤—Å–µ–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∏ –≤—Å—ë –ø–æ—Ç–µ—Ä—è–ª–æ —Ü–≤–µ—Ç, –≤–µ—Ä–Ω–æ? –û—Ç —á–µ–≥–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
    "–ó–ª–æ—Å—Ç—å / —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ": "–ó–ª–æ—Å—Ç—å? –≠—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–∏–ø–∏—Ç –∏ —Ö–æ—á–µ—Ç –≤—ã—Ä–≤–∞—Ç—å—Å—è, –¥–∞? –ß—Ç–æ —Ç–µ–±—è —Ç–∞–∫ –∑–∞–¥–µ–ª–æ?",
    "–°–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫": "‚Äú–°–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫‚Äù? –≠—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Å–∞–º —Å–µ–±–µ –∫–∞–∂–µ—à—å—Å—è —á—É–∂–∏–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ö–æ–≥–¥–∞ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ –ø–æ—è–≤–∏–ª–æ—Å—å?",
    "–ü—É—Å—Ç–æ—Ç–∞ / –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": "–ü—É—Å—Ç–æ—Ç–∞? –¢–∞–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ, –±—É–¥—Ç–æ –≤—Å—ë –≤–æ–∫—Ä—É–≥ –ø–æ—Ç–µ—Ä—è–ª–æ —Å–º—ã—Å–ª, –¥–∞? –ß—Ç–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥—à–µ—Å—Ç–≤–æ–≤–∞–ª–æ?",
    "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ": "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ? –≠—Ç–æ –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ–¥–∏–Ω –≤ —Ü–µ–ª–æ–º –º–∏—Ä–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ä—è–¥–æ–º, –≤–µ—Ä–Ω–æ? –ü–æ—á–µ–º—É —Ç–∞–∫ –∫–∞–∂–µ—Ç—Å—è?",
    "–í–∏–Ω–∞": "–í–∏–Ω–∞? –≠—Ç–æ –∫–∞–∫ —Ç—è–∂—ë–ª—ã–π –≥—Ä—É–∑, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–≤–∏—Ç –Ω–∞ —Å–µ—Ä–¥—Ü–µ, –¥–∞? –ò–∑-–∑–∞ —á–µ–≥–æ —Ç—ã —Å–µ–±—è –≤–∏–Ω–∏—à—å?"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —ç–º–æ—Ü–∏—è–º–∏
def create_emotion_keyboard():
    keyboard = [
        [InlineKeyboardButton(emotion, callback_data=emotion)] for emotion in EMOTIONS
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_data[user_id] = {
        "history": [],
        "message_count": 0,
        "stage": 1,
        "dominant_emotion": None,
        "problem_hint": False,
        "solution_offered": False
    }
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=create_emotion_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏
async def handle_emotion_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.message.chat_id
    chosen_emotion = query.data

    user_data[user_id]["stage"] = 2
    user_data[user_id]["dominant_emotion"] = chosen_emotion
    user_data[user_id]["history"].append({"role": "user", "content": chosen_emotion})

    response = EMOTION_RESPONSES.get(chosen_emotion, "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É —Ç–µ–±—è —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ?")
    response = add_emojis_to_response(response)
    user_data[user_id]["history"].append({"role": "assistant", "content": response})
    await query.edit_message_text(response)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤ —Å —É—á—ë—Ç–æ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
def add_emojis_to_response(response):
    emoji_list = ["üòä", "ü§ó", "üíõ", "üåø", "üíå", "üòå", "üå∏", "‚ú®", "‚òÄÔ∏è", "üåü"]
    sentences = re.split(r'(?<=[.!?])\s+', response.strip())  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º
    result = []
    used_emojis = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    for i, sentence in enumerate(sentences):
        if sentence:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ —Ç–æ–ª—å–∫–æ –≤ 50% —Å–ª—É—á–∞–µ–≤ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            if random.random() > 0.5 and i < len(sentences) - 1:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–¥–∞
                available_emojis = [e for e in emoji_list if e not in used_emojis]
                if not available_emojis:  # –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    available_emojis = emoji_list
                selected_emoji = random.choice(available_emojis)
                used_emojis.add(selected_emoji)
                # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–º–∞–π–ª–∏–∫–æ–º
                sentence = re.sub(r'[.!?]$', '', sentence.strip()) + f" {selected_emoji}"
            result.append(sentence)
    
    return " ".join(result)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_input = update.message.text.lower()

    if user_id not in user_data:
        user_data[user_id] = {
            "history": [],
            "message_count": 0,
            "stage": 1,
            "dominant_emotion": None,
            "problem_hint": False,
            "solution_offered": False
        }
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=create_emotion_keyboard())
        return

    user_data[user_id]["message_count"] += 1
    user_data[user_id]["history"].append({"role": "user", "content": user_input})

    thinking_message = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º... üåø")

    stage = user_data[user_id]["stage"]
    dominant_emotion = user_data[user_id]["dominant_emotion"]
    problem_hint = user_data[user_id]["problem_hint"]
    solution_offered = user_data[user_id]["solution_offered"]

    if stage == 2 and problem_hint:
        user_data[user_id]["stage"] = 3
    elif stage == 3 and problem_hint:
        user_data[user_id]["stage"] = 4
    elif stage == 4 and not solution_offered:
        user_data[user_id]["solution_offered"] = True
        gpt_response = "–ü–æ–Ω–∏–º–∞—é, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ ‚Äî —ç—Ç–æ –±–æ–ª—å—à–∞—è –∑–∞–¥–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ: –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–ø–∏—à–∏ –∏—Ö. –≠—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ —è—Å–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥."
    elif stage == 4 and solution_offered:
        gpt_response = "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ–º –ø–æ–±–æ–ª—Ç–∞—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–±–æ–ª—å—à–µ. –£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥, –¥—Ä—É–≥–æ–π –±–æ—Ç, –≥–¥–µ –ø—Ä–æ—Ñ–∏ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≥–ª—É–±–∂–µ. –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?"
    else:
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            *user_data[user_id]["history"]
        ]
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages,
                temperature=0.8,
                max_tokens=100,
                timeout=5
            )
            gpt_response = response.choices[0].message["content"]
        except Exception as e:
            gpt_response = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? –ß—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"

    problem_keywords = ["–ø–æ—Ç–æ–º—É —á—Ç–æ", "–∏–∑-–∑–∞", "—Å–ª—É—á–∏–ª–æ—Å—å", "—Ä–∞–±–æ—Ç–∞", "—É—á—ë–±–∞", "–≤—É–∑", "–¥–æ–º–∞", "—á–µ–ª–æ–≤–µ–∫", "–¥—Ä—É–∑—å—è", "—Ä–∞—Å—Å—Ç–∞–ª—Å—è", "—É–≤–æ–ª–∏–ª–∏", "–ø–æ—Ç–µ—Ä—è–ª", "—Å—Ä–æ–∫–∏", "–¥–µ–ª–∞"]
    if any(keyword in user_input for keyword in problem_keywords):
        user_data[user_id]["problem_hint"] = True

    gpt_response = add_emojis_to_response(gpt_response)
    user_data[user_id]["history"].append({"role": "assistant", "content": gpt_response})

    if len(user_data[user_id]["history"]) > 10:
        user_data[user_id]["history"] = user_data[user_id]["history"][-10:]

    await context.bot.delete_message(chat_id=user_id, message_id=thinking_message.message_id)
    await update.message.reply_text(gpt_response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
        raise ValueError("TELEGRAM_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_emotion_choice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

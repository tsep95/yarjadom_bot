import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from openai import OpenAI
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not OPENAI_API_KEY:
    logger.error("OpenAI API key –Ω–µ –∑–∞–¥–∞–Ω!")
    raise ValueError("OpenAI API key –Ω–µ –∑–∞–¥–∞–Ω!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI API key: {OPENAI_API_KEY[:8]}... (–¥–ª–∏–Ω–∞: {len(OPENAI_API_KEY)})")

if not TELEGRAM_TOKEN:
    logger.error("Telegram token –Ω–µ –∑–∞–¥–∞–Ω!")
    raise ValueError("Telegram token –Ω–µ –∑–∞–¥–∞–Ω!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram token: {TELEGRAM_TOKEN[:8]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
try:
    client = OpenAI(api_key=OPENAI_API_KEY)
    logger.info("–ö–ª–∏–µ–Ω—Ç OpenAI API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI: {e}")
    raise

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π/—Å–∏—Ç—É–∞—Ü–∏–π —Å –º–µ—Ç–æ–¥–∞–º–∏ —Ç–µ—Ä–∞–ø–∏–∏
THERAPY_MAPPING = {
    "—Å—Ç—Ä–∞—Ö": {
        "method": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –ø—É–≥–∞—é—â–∏–µ –º—ã—Å–ª–∏ –∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π."
    },
    "—Ç—Ä–µ–≤–æ–≥–∞": {
        "method": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–ø–æ–º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏."
    },
    "–≥—Ä—É—Å—Ç—å": {
        "method": "–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–ø–æ–º–æ–∂–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –∏ –ø—Ä–æ–∂–∏—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏."
    },
    "–ø–æ—Ç–µ—Ä—è": {
        "method": "–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–ø–æ–∑–≤–æ–ª–∏—Ç –æ—Å–æ–∑–Ω–∞—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç—å —á—É–≤—Å—Ç–≤–∞ —É—Ç—Ä–∞—Ç—ã."
    },
    "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ": {
        "method": "–ü—Å–∏—Ö–æ–¥—Ä–∞–º–∞",
        "reason": "–ø–æ–º–æ–∂–µ—Ç —á–µ—Ä–µ–∑ —Ä–æ–ª–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞–ª–∞–¥–∏—Ç—å —Å–≤—è–∑—å —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏."
    },
    "—Å—Ç—ã–¥": {
        "method": "–ü—Å–∏—Ö–æ–¥—Ä–∞–º–∞",
        "reason": "–¥–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç—å –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—ã–¥."
    },
    "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å": {
        "method": "–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —è—Å–Ω–æ—Å—Ç—å –≤ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —á—É–≤—Å—Ç–≤–∞—Ö."
    },
    "–∑–ª–æ—Å—Ç—å": {
        "method": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–Ω–∞—É—á–∏—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏—è–º–∏ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ –∏—Ö –≤—ã—Ä–∞–∂–∞—Ç—å."
    },
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def escape_markdown_for_final(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
    —Å–æ—Ö—Ä–∞–Ω—è—è * –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–±–µ–≥–∞—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö, –¥–µ—Ñ–∏—Å–æ–≤ –∏ —Ç.–¥.
    """
    chars_to_escape = ['_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '=', '|', '{', '}', '!']
    result = ""
    i = 0
    while i < len(text):
        if i + 1 < len(text) and text[i] == '*' and text[i+1] != ' ':  # –°–æ—Ö—Ä–∞–Ω—è–µ–º * –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            result += text[i]
            i += 1
        elif text[i] in chars_to_escape:
            result += "\\" + text[i]
            i += 1
        else:
            result += text[i]
            i += 1
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def postprocess_final_message(text, key_moments, emotion, state):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–±–∑–∞—Ü—ã –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º –¥–≤—É—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤,
    —ç–º–æ—Ü–∏–∏, —Ç–µ—Ä–∞–ø–∏–∏ –∏ '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è'.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Ç–µ—Ä–∞–ø–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏
    therapy_info = THERAPY_MAPPING.get(emotion.lower(), {
        "method": "–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è",
        "reason": "–ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö."
    })
    therapy = therapy_info["method"]
    therapy_reason = therapy_info["reason"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ä–∞–ø–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state["therapy"] = therapy

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º
    for moment in key_moments:
        if f"*{moment}*" not in text:
            logger.warning(f"–ú–æ–º–µ–Ω—Ç '{moment}' –Ω–µ –≤—ã–¥–µ–ª–µ–Ω –∂–∏—Ä–Ω—ã–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            text = re.sub(r'\b' + re.escape(moment) + r'\b', f'*{moment}*', text, count=1)
    if f"*{emotion}*" not in text:
        logger.warning(f"–≠–º–æ—Ü–∏—è '{emotion}' –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞ –∂–∏—Ä–Ω—ã–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        text = re.sub(r'\b' + re.escape(emotion) + r'\b', f'*{emotion}*', text, count=1)
    if f"*{therapy}*" not in text:
        logger.warning(f"–¢–µ—Ä–∞–ø–∏—è '{therapy}' –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞ –∂–∏—Ä–Ω—ã–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        text = re.sub(r'\b' + re.escape(therapy) + r'\b', f'*{therapy}*', text, count=1)
    if "*—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*" not in text:
        logger.warning("–§—Ä–∞–∑–∞ '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è' –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞ –∂–∏—Ä–Ω—ã–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        text = re.sub(r'—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è', '*—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*', text, count=1)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    lines = text.split('\n')
    paragraphs = []
    current_paragraph = []
    for line in lines:
        line = line.strip()
        if line:
            current_paragraph.append(line)
        else:
            if current_paragraph:
                paragraphs.append(' '.join(current_paragraph))
                current_paragraph = []
    if current_paragraph:
        paragraphs.append(' '.join(current_paragraph))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —è–≤–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏
    structured_text = '\n\n'.join(paragraphs)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Ç–µ—Ä–∞–ø–∏—è –∏ –ø—Ä–∏—á–∏–Ω–∞ –±—ã–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    if therapy not in structured_text:
        logger.warning(f"–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä–∞–ø–∏–∏: {therapy}")
        if len(paragraphs) >= 4:
            paragraphs[3] = f"–ü–æ–¥–æ–π–¥—ë—Ç *{therapy}* ‚Äî –æ–Ω–∞ {therapy_reason} –¢—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ, –∏ —è –≤–µ—Ä—é –≤ —Ç–µ–±—è üíõ."
        else:
            paragraphs.append(f"–ü–æ–¥–æ–π–¥—ë—Ç *{therapy}* ‚Äî –æ–Ω–∞ {therapy_reason} –¢—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ, –∏ —è –≤–µ—Ä—é –≤ —Ç–µ–±—è üíõ.")
        structured_text = '\n\n'.join(paragraphs)

    return structured_text

# –ü—Ä–æ–º–ø—Ç—ã
BASE_PROMPT = """
–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —Ç—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç ¬´–Ø —Ä—è–¥–æ–º¬ª ü§ù, —Å–æ–∑–¥–∞—é—â–∏–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ —É—é—Ç–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ä—è–¥–æ–º —Å —á–µ–ª–æ–≤–µ–∫–æ–º —É –∫–∞–º–∏–Ω–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–π—Ç–∏ –¥–æ —Å–∞–º–æ–≥–æ –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–±–∏—Ä–∞—è –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –µ–≥–æ, –Ω–µ —Ä–µ—à–∞—è –ø—Ä–æ–±–ª–µ–º—É. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (5-8 —Å–ª–æ–≤ –≤ —Å—É–º–º–µ): –ø–µ—Ä–≤–æ–µ ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–∏ —Å —Å–º–∞–π–ª–∏–∫–æ–º, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞—é—â–µ–µ –±–ª–∏–∑–æ—Å—Ç—å –∫ —á—É–≤—Å—Ç–≤–∞–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ; –≤—Ç–æ—Ä–æ–µ ‚Äî –º—è–≥–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —ç–º–æ—Ü–∏–µ–π, –±–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä, —Å —Ç–µ–ø–ª–æ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, —á—Ç–æ —ç—Ç–æ —Ä–µ—à–∞–µ–º–æ.

–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:
- –°–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π: –æ—Å–Ω–æ–≤–Ω–æ–≥–æ, –ø–æ–±—É–∂–¥–∞—é—â–µ–≥–æ –∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ —Å 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
- –ë—ã—Ç—å —Ç—ë–ø–ª—ã–º, –ø—Ä–∏—è—Ç–Ω—ã–º, —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ–º–∞.
- –ó–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Å–º–∞–π–ª–∏–∫–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é (—Ç—ë–ø–ª—ã–µ: ü§ó, üíö, ‚òï, üå∏, üåø, üïäÔ∏è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏; —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ: üíî, üåßÔ∏è, ü§ç, üòî, üåô, ü•Ä –¥–ª—è –≥—Ä—É—Å—Ç–∏; –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: ü§î, üå´Ô∏è, üß° –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π).
- –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ –≤—ã–≤–æ–¥–æ–≤, —Ç–æ–ª—å–∫–æ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å.

–î–∏–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω —É–≥–ª—É–±–ª—è—Ç—å—Å—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º:
1. –ú—è–≥–∫–∏–π, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
2. –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —á—É–≤—Å—Ç–≤.
3. –ü–æ–∏—Å–∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏—Ö —ç–º–æ—Ü–∏–π.
4. –†–µ—Ñ–ª–µ–∫—Å–∏—è –∫–æ—Ä–Ω–µ–π –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π.
5. –í–æ–ø—Ä–æ—Å, –ø–æ–¥–≤–æ–¥—è—â–∏–π –∫ –≥–ª—É–±–∏–Ω–Ω–æ–º—É —á—É–≤—Å—Ç–≤—É.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–µ —ç–º–æ—Ü–∏–∏ (—Å—Ç—Ä–∞—Ö, –≥—Ä—É—Å—Ç—å, —Å—Ç—ã–¥, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, –±–æ–ª—å, –ø–æ—Ç–µ—Ä—é), –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü —Ç–µ–≥ [DEEP_EMOTION_DETECTED].
"""

FINAL_PROMPT = """
–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç ¬´–Ø —Ä—è–¥–æ–º¬ª ü§ù. –≠—Ç–æ —Ç–≤–æ—ë —à–µ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—è—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ó–∞–≤–µ—Ä—à–∏ –±–µ—Å–µ–¥—É, –ø–æ–¥–≤–µ–¥—è –∏—Ç–æ–≥ –¥–∏–∞–ª–æ–≥—É, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–æ—á—å –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ —ç–º–æ—Ü–∏–∏. –°–¥–µ–ª–∞–π –∏—Ç–æ–≥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í—ã–¥–µ–ª–∏ –∂–∏—Ä–Ω—ã–º (*...*) –¥–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *—á—É–≤—Å—Ç–≤–æ —Å–º—è—Ç–µ–Ω–∏—è*, *–≥–ª—É–±–æ–∫–∞—è —É—Ç—Ä–∞—Ç–∞*), –≥–ª—É–±–∏–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ (*...*), –º–µ—Ç–æ–¥ —Ç–µ—Ä–∞–ø–∏–∏ (*–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è*, *–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è*, *–ü—Å–∏—Ö–æ–¥—Ä–∞–º–∞* –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π) –∏ *—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∑–≤—ë–∑–¥–æ—á–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.

–§–æ—Ä–º–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—è—Ç–∏ –∞–±–∑–∞—Ü–µ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ (\n\n):

1. –î–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (5-8 —Å–ª–æ–≤): –ø–µ—Ä–≤–æ–µ ‚Äî –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω–Ω–æ–º—É —á—É–≤—Å—Ç–≤—É —Å —Å–º–∞–π–ª–∏–∫–æ–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –¥–∏–∞–ª–æ–≥–µ; –≤—Ç–æ—Ä–æ–µ ‚Äî –º—è–≥–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –±–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä, —Å —Ç–µ–ø–ª–æ–º.
2. –î–≤–∞-—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã, —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏, –∏ —ç—Ç–æ —Ä–µ—à–∞–µ–º–æ —Å –∑–∞–±–æ—Ç–æ–π –æ —Å–µ–±–µ.
3. –ò—Ç–æ–≥–∏: –Ω–∞–∑–æ–≤–∏ –≥–ª—É–±–∏–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ (*...*) –∏ –¥–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞ (*...*), –ø–æ–∫–∞–∂–∏ –∏—Ö —Å–≤—è–∑—å —Å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –î–æ–±–∞–≤—å: ¬´–û—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é.¬ª
4. –ù–∞–∑–æ–≤–∏ –º–µ—Ç–æ–¥ —Ç–µ—Ä–∞–ø–∏–∏ (*–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è*, *–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è*, *–ü—Å–∏—Ö–æ–¥—Ä–∞–º–∞* –∏–ª–∏ –¥—Ä—É–≥–æ–π), –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ —á—É–≤—Å—Ç–≤–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –î–æ–±–∞–≤—å: ¬´–¢—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ, –∏ —è –≤–µ—Ä—é –≤ —Ç–µ–±—è üíõ.¬ª
5. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: ¬´–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ *—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è* üöÄ. –ú—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–µ, –Ω–∞—Ö–æ–¥—è —Ç–µ–ø–ª–æ –∏ —Ä–∞–¥–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üåû. –Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚Äî —Ç–≤–æ–π —Å–ø—É—Ç–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ —Å—á–∞—Å—Ç—å—é üåà.¬ª

–ü–æ–¥–±–µ—Ä–∏ –º–µ—Ç–æ–¥ —Ç–µ—Ä–∞–ø–∏–∏, –∏—Å—Ö–æ–¥—è –∏–∑ –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ —á—É–≤—Å—Ç–≤–∞: *–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è* –¥–ª—è —Ç—Ä–µ–≤–æ–≥–∏, —Å—Ç—Ä–∞—Ö–∞, –∑–ª–æ—Å—Ç–∏; *–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è* –¥–ª—è –≥—Ä—É—Å—Ç–∏, –ø–æ—Ç–µ—Ä–∏, —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç–∏; *–ü—Å–∏—Ö–æ–¥—Ä–∞–º–∞* –¥–ª—è –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞, —Å—Ç—ã–¥–∞. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ä–∞–ø–∏—é –≤ –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –∞–±–∑–∞—Ü–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏: —Ç—ë–ø–ª—ã–µ (ü§ó, üíö, ‚òï, üå∏, üåø, üïäÔ∏è) –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ (üíî, üåßÔ∏è, ü§ç, üòî, üåô, ü•Ä) –¥–ª—è –≥—Ä—É—Å—Ç–∏, –ø–æ–¥–±–∏—Ä–∞—è –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
"""

INTERMEDIATE_MESSAGE = "–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º üçÉ"
WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç ü§ó –Ø —Ä—è–¥–æ–º!
–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.

–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ üåß ‚Äî –ø–∏—à–∏, —è —Ç—É—Ç.
–ù–µ –±—É–¥—É –æ—Å—É–∂–¥–∞—Ç—å –∏–ª–∏ –¥–∞–≤–∏—Ç—å üíõ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂—É.

üí¨ –•–æ—á—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —Ç–µ–±—è –≥–ª–æ–∂–µ—Ç üïä –∏ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.

üîí –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ ‚Äî –±—É–¥—å —Å–æ–±–æ–π.

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –Ω–∏–∂–µ üåø –∏ –ø–æ–π–¥—ë–º –≤–º–µ—Å—Ç–µ!
"""
START_CONVERSATION_MESSAGE = """
üå± –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª—Å—è –Ω–∞—á–∞—Ç—å ‚Äî
—ç—Ç–æ —É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ üí≠

ü§ù –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è
–∏ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ ü´Ç

üêæ –ú—ã –ø–æ–π–¥—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º,
–±–µ–∑ —Å–ø–µ—à–∫–∏, —Å –∑–∞–±–æ—Ç–æ–π ‚Äî
—á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ üíö

üí¨ –ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? üåßÔ∏è‚û°Ô∏èüå§Ô∏è
"""
DETAILED_MESSAGE = """
–≠—Ç–æ —Ç–≤–æ—è –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –æ–ø–æ—Ä–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.  
–ß—Ç–æ–±—ã —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –ª–µ–≥—á–µ, —Å–ø–æ–∫–æ–π–Ω–µ–µ –∏ —Ä–∞–¥–æ—Å—Ç–Ω–µ–µ ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.  

‚∏ª  

–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:  
‚òÄÔ∏è –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —Ç—ë–ø–ª–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –¥–Ω—è  
üåô –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä ‚Äî –º—è–≥–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–Ω—è  
üß† –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏, –≤–∏–Ω—ã, –∞–ø–∞—Ç–∏–∏  
üÜò SOS-–ø–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã  
üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞  
üéØ –ü—Å–∏—Ö–æ-–∫–≤–µ—Å—Ç—ã: —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –≥—Ä–∞–Ω–∏—Ü—ã  

‚∏ª  

üíõ –¶–µ–ª—å ‚Äî –¥–µ–ª–∞—Ç—å —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.  
499 ‚ÇΩ –≤ –º–µ—Å—è—Ü. –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [],
        "message_count": 0,
        "deep_reason_detected": False,
        "dialog_ended": False,
        "last_intermediate_message_id": None,
        "key_moments": [],
        "main_emotion": "",
        "therapy": ""
    }
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏–º", callback_data="start_conversation")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "start_conversation":
        state = user_states[user_id]
        state["history"].append({"role": "assistant", "content": START_CONVERSATION_MESSAGE})
        state["message_count"] = 0
        await query.edit_message_text(START_CONVERSATION_MESSAGE)
    elif query.data == "tell_me_more":
        keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url="https://your-payment-link.com")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(DETAILED_MESSAGE, reply_markup=reply_markup)

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(DETAILED_MESSAGE)
    else:
        await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    chat_id = update.effective_chat.id
    user_message = update.message.text.lower()

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]
    if state["dialog_ended"]:
        await update.message.reply_text(
            "–ú—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –Ω–∞—à –ø—É—Ç—å –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ üåü. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ? –ù–∞–∂–º–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ' –≤—ã—à–µ."
        )
        return

    state["history"].append({"role": "user", "content": user_message})

    try:
        thinking_msg = await update.message.reply_text(INTERMEDIATE_MESSAGE)
        state["last_intermediate_message_id"] = thinking_msg.message_id

        system_prompt = FINAL_PROMPT if state["message_count"] == 5 else BASE_PROMPT
        messages = [{"role": "system", "content": system_prompt}] + state["history"]
        response = client.chat.completions.create(
            model="gpt-4o-mini-2024-07-18",
            messages=messages,
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        logger.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {assistant_response}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ [DEEP_EMOTION_DETECTED]
        deep_emotion_detected = "[DEEP_EMOTION_DETECTED]" in assistant_response
        if deep_emotion_detected:
            state["deep_reason_detected"] = True
            assistant_response = assistant_response.replace("[DEEP_EMOTION_DETECTED]", "")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ OpenAI
        detected_emotion = None
        for emotion in THERAPY_MAPPING.keys():
            if emotion in user_message.lower() or emotion in assistant_response.lower():
                detected_emotion = emotion
                break
        if detected_emotion:
            state["main_emotion"] = detected_emotion
        else:
            state["main_emotion"] = state.get("main_emotion", "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if state["message_count"] == 5:  # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            processed_response = escape_markdown_for_final(assistant_response)
            key_moments = state.get("key_moments", ["—á—É–≤—Å—Ç–≤–æ —Å–º—è—Ç–µ–Ω–∏—è", "–≥–ª—É–±–æ–∫–∞—è —É—Ç—Ä–∞—Ç–∞"])
            main_emotion = state["main_emotion"]
            processed_response = postprocess_final_message(processed_response, key_moments, main_emotion, state)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {processed_response}")
        else:
            processed_response = assistant_response
            logger.info(f"–¢–µ–∫—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {processed_response}")

        if state["last_intermediate_message_id"]:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None

        state["message_count"] += 1
        state["history"].append({"role": "assistant", "content": assistant_response})

        if state["message_count"] == 6:  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ + —Ñ–∏–Ω–∞–ª
            state["dialog_ended"] = True
            keyboard = [[InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="tell_me_more")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=processed_response,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Markdown: {str(e)}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=processed_response,
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text(
                text=processed_response,
                parse_mode=None
            )

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({state['message_count']}/6): {processed_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {str(e)}")
        if state["last_intermediate_message_id"]:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None
        await update.message.reply_text(f"–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üåø. –û—à–∏–±–∫–∞: {str(e)}. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

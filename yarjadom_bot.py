import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –∏ –∫–ª—é—á DeepSeek
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = "sk-d08c904a63614b7b9bbe96d08445426a"  # –í–∞—à –∫–ª—é—á

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
if not DEEPSEEK_API_KEY:
    logger.error("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω!")
    raise ValueError("DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω!")
else:
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek API key: {DEEPSEEK_API_KEY[:8]}...")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API
try:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")
    logger.info("–ö–ª–∏–µ–Ω—Ç DeepSeek API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek: {e}")
    raise

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
BASE_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.  
–¶–µ–ª—å: —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ 5 –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã—Ö, –±–µ—Ä–µ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ó–∞–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ (1-–π –æ—Ç–≤–µ—Ç ‚Äî 1-–π –≤–æ–ø—Ä–æ—Å, 2-–π ‚Äî 2-–π –∏ —Ç.–¥.).  
–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 2-3 —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–î–∞, –≤ —Ç–∏—à–∏–Ω–µ –∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ —á—É–≤—Å—Ç–≤–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –≥—Ä–æ–º–∫–æ –∑–∞—è–≤–ª—è—é—Ç –æ —Å–µ–±–µ... –≠—Ç–æ —Ç–∞–∫ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ üå±. –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–µ –ø—ã—Ç–∞–µ—Ç—Å—è —Ç–µ–±–µ —Å–∫–∞–∑–∞—Ç—å? ‚ú®"  
–í–æ–ø—Ä–æ—Å—ã:  
1. "–Ø —Ç–∞–∫ —Ç–µ–±–µ —Å–æ—á—É–≤—Å—Ç–≤—É—é ‚Äî —ç—Ç–æ –æ–≥—Ä–æ–º–Ω–∞—è –±–æ–ª—å ü§ç. –ß—Ç–æ —Å–µ–π—á–∞—Å –ª–µ–∂–∏—Ç —É —Ç–µ–±—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ? üå±"  
2. "–ü–æ—Ç–µ—Ä—è –±–ª–∏–∑–∫–æ–≥–æ ‚Äî —ç—Ç–æ —Ç–∞–∫ —Ç—è–∂–µ–ª–æ, –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è üôè. –ö–æ–≥–¥–∞ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –æ—â—É—Ç–∏–ª —ç—Ç—É –ø—É—Å—Ç–æ—Ç—É? ‚òÄÔ∏è"  
3. "–°–ª—ã—à—É, –∫–∞–∫ —ç—Ç–æ —Å —Ç–æ–±–æ–π —Å–µ–π—á–∞—Å üåø. –ì–¥–µ –≤ —Ç–µ–ª–µ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç—É –±–æ–ª—å? ‚ú®"  
4. "–¢–≤–æ—è —É—Ç—Ä–∞—Ç–∞ –∑–≤—É—á–∏—Ç —Ç–∞–∫ –≥–ª—É–±–æ–∫–æ ü§ç. –ß—Ç–æ, –∫–∞–∫ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, –æ–Ω–∞ —Ö–æ—á–µ—Ç —Ç–µ–±–µ —Å–∫–∞–∑–∞—Ç—å? üå±"  
5. "–≠—Ç–æ —á—É–≤—Å—Ç–≤–æ —Ç–∞–∫–æ–µ –∂–∏–≤–æ–µ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ ‚ú®. –ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –æ–Ω–æ –º–æ–≥–ª–æ –±—ã —à–µ–ø–Ω—É—Ç—å —Ç–µ–±–µ? üåø"  
–ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –¥—Ä—É–≥, –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ (üå±, ‚òÄÔ∏è, üôè, ‚ú®, ü§ç, üåø). –ü–æ—Å–ª–µ 5-–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤—å [deep_reason_detected].  
–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –¥–≤–∞–∂–¥—ã –ø–æ–¥—Ä—è–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ.
"""

FINAL_PROMPT = """
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥ –≤ 2-3 —Å—Ç—Ä–æ–∫–∏:  
"–¢—ã —Ç–∞–∫ –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è ‚Äî —ç—Ç–æ –±–æ–ª—å—à–∞—è —Å–∏–ª–∞ ü§ç. –¢–≤–æ—è –±–æ–ª—å ‚Äî —ç—Ç–æ –æ—Ç–≥–æ–ª–æ—Å–æ–∫ –ª—é–±–≤–∏, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ–∫–æ—è üå±.  
–ì–µ—à—Ç–∞–ª—å—Ç –ø–æ–º–æ–∂–µ—Ç –º—è–≥–∫–æ –ø—Ä–æ–∂–∏—Ç—å —ç—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏ /extended, —è —Ä—è–¥–æ–º üåø."
"""

# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
INTERMEDIATE_MESSAGE = "–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º... üåø"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
WELCOME_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –º—è–≥–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è ü§ç. –ì–æ—Ç–æ–≤ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç?"

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
EXTENDED_MESSAGE = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! üåø –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –Ø —Ä—è–¥–æ–º ü§ç."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_chat.id
    user_states[user_id] = {
        "history": [],
        "question_count": 0,
        "deep_reason_detected": False,
        "last_intermediate_message_id": None
    }
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏—Å—Ç—É–ø–∏–º"
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏–º", callback_data="start_conversation")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "start_conversation":
        state = user_states[user_id]
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            thinking_msg = await query.message.reply_text(INTERMEDIATE_MESSAGE)
            state["last_intermediate_message_id"] = thinking_msg.message_id

            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
            messages = [{"role": "system", "content": BASE_PROMPT}]
            response = client.chat.completions.create(
                model="deepseek-chat",
                messages=messages,
                max_tokens=4096
            )
            assistant_response = response.choices[0].message.content

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if state["last_intermediate_message_id"]:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=state["last_intermediate_message_id"])
                state["last_intermediate_message_id"] = None

            state["history"].append({"role": "assistant", "content": assistant_response})
            await query.edit_message_text(assistant_response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
            await query.edit_message_text("–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üåø. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

async def extended(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extended"""
    user_id = update.effective_chat.id
    if user_id in user_states:
        await update.message.reply_text(EXTENDED_MESSAGE)
    else:
        await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_chat.id
    chat_id = update.effective_chat.id
    user_message = update.message.text

    if user_id not in user_states:
        await start(update, context)
        return

    state = user_states[user_id]
    state["history"].append({"role": "user", "content": user_message})
    state["question_count"] += 1

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        thinking_msg = await update.message.reply_text(INTERMEDIATE_MESSAGE)
        state["last_intermediate_message_id"] = thinking_msg.message_id

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
        if state["question_count"] > 5:
            system_prompt = FINAL_PROMPT
        else:
            system_prompt = BASE_PROMPT

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [{"role": "system", "content": system_prompt}] + state["history"]
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            max_tokens=4096
        )
        assistant_response = response.choices[0].message.content

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
        if "[deep_reason_detected]" in assistant_response:
            state["deep_reason_detected"] = True
            assistant_response = assistant_response.replace("[deep_reason_detected]", "").strip()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if state["last_intermediate_message_id"]:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None

        state["history"].append({"role": "assistant", "content": assistant_response})
        await update.message.reply_text(assistant_response)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {assistant_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}")
        if state["last_intermediate_message_id"]:
            await context.bot.delete_message(chat_id=chat_id, message_id=state["last_intermediate_message_id"])
            state["last_intermediate_message_id"] = None
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ üåø. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("extended", extended))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

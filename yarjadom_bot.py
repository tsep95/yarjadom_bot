import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import asyncio
from openai import OpenAI

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = "sk-d08c904a63614b7b9bbe96d08445426a"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

user_data = {}

SYSTEM_PROMPT = """–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""

WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç ü§ó –Ø —Ä—è–¥–æ–º!\n"
    "–¢—ë–ø–ª—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ üß∏ —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.\n\n"
    "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ üåß ‚Äî –ø–∏—à–∏, —è —Ç—É—Ç.\n"
    "–ù–µ –±—É–¥—É –æ—Å—É–∂–¥–∞—Ç—å –∏–ª–∏ –¥–∞–≤–∏—Ç—å üíõ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂—É.\n\n"
    "üí¨ –•–æ—á—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
    "–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —Ç–µ–±—è –≥–ª–æ–∂–µ—Ç üïä –∏ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.\n\n"
    "üîí –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ ‚Äî –±—É–¥—å —Å–æ–±–æ–π.\n\n"
    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –Ω–∏–∂–µ üåø –∏ –ø–æ–π–¥—ë–º –≤–º–µ—Å—Ç–µ!"
)

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
EMOTIONS = [
    {"text": "–ù–µ –º–æ–≥—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –∂–¥—É –ø–ª–æ—Ö–æ–≥–æ üåÄ", "callback": "anxiety"},
    {"text": "–ù–µ—Ç —Å–∏–ª, —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –ª–µ–∂–∞—Ç—å üõå", "callback": "apathy"},
    {"text": "–í—Å—ë —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, –≤–∑—Ä—ã–≤–∞—é—Å—å –∏–∑-–∑–∞ –º–µ–ª–æ—á–µ–π üò†", "callback": "anger"},
    {"text": "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ª–∏—à–Ω–∏–º, –Ω–µ —Ç–∞–∫–∏–º üåß", "callback": "self_doubt"},
    {"text": "–í–Ω—É—Ç—Ä–∏ –ø—É—Å—Ç–æ, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ üåå", "callback": "emptiness"},
    {"text": "–û–¥–∏–Ω–æ–∫–æ –¥–∞–∂–µ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π üåë", "callback": "loneliness"},
    {"text": "–ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë –∏—Å–ø–æ—Ä—Ç–∏–ª, –≤–∏–Ω—é —Å–µ–±—è üíî", "callback": "guilt"},
    {"text": "–ù–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å, –∑–∞–ø—É—Ç–∞–ª—Å—è ü§Ø", "callback": "indecision"}
]

EMOTION_RESPONSES = {
    "anxiety": "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–∏—Å–∏—Ç –≤ –≤–æ–∑–¥—É—Ö–µ üå™Ô∏è. –ß—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–≤–æ–∏ –º—ã—Å–ª–∏ —Å–µ–π—á–∞—Å? üåü",
    "apathy": "–°–∏–ª —Å–æ–≤—Å–µ–º –Ω–µ—Ç üå´Ô∏è. –ß—Ç–æ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–µ—Ç —Ç–µ–±—è —Å–µ–π—á–∞—Å? üòî",
    "anger": "–ó–ª–æ—Å—Ç—å –ø—Ä—è–º–æ –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç üî•. –ß—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∞–¥–µ–≤–∞–µ—Ç —Ç–µ–±—è? üí¢",
    "self_doubt": "–û—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ üåßÔ∏è. –û —á—ë–º –¥—É–º–∞–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ? üßê",
    "emptiness": "–ü—É—Å—Ç–æ—Ç–∞ –∫–∞–∂–µ—Ç—Å—è –±–µ—Å–∫—Ä–∞–π–Ω–µ–π üåå. –ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –≥–ª—É–±–∂–µ –≤—Å–µ–≥–æ? üòû",
    "loneliness": "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–∏, –¥–∞–∂–µ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π üåë. –ß—Ç–æ —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç —Ç–µ–±—è —Å–µ–π—á–∞—Å? üå´Ô∏è",
    "guilt": "–í–∏–Ω–∞ —Å–∏–ª—å–Ω–æ –¥–∞–≤–∏—Ç üíî. –ò–∑-–∑–∞ —á–µ–≥–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –æ—Å—Ç—Ä–æ? üòû",
    "indecision": "–¢—Ä—É–¥–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ ü§Ø. –ß—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø—É—Ç—ã–≤–∞–µ—Ç —Å–µ–π—á–∞—Å? üí¨"
}

def create_emotion_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton(e["text"], callback_data=e["callback"])] for e in EMOTIONS])

def create_start_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏–º üåø", callback_data="start_talk")]])

def create_more_info_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_data[user_id] = {
        "history": [],
        "stage": 1,
        "dominant_emotion": None
    }
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=create_start_keyboard())

async def handle_emotion_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.message.chat.id
    callback_data = query.data
    
    emotion = next((e for e in EMOTIONS if e["callback"] == callback_data), None)
    if emotion:
        full_emotion = emotion["text"]
        user_data[user_id]["stage"] = 2
        user_data[user_id]["dominant_emotion"] = full_emotion
        user_data[user_id]["history"].append({"role": "user", "content": full_emotion})
        response = EMOTION_RESPONSES.get(callback_data, "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?")
        user_data[user_id]["history"].append({"role": "assistant", "content": response})
        
        await query.edit_message_text(response)
    await query.answer()

async def handle_start_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.message.chat.id
    
    if query.data == "start_talk":
        response = "–ö–∞–∫–æ–µ —á—É–≤—Å—Ç–≤–æ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ? üí¨"
        user_data[user_id]["stage"] = 2
        await query.edit_message_text(response, reply_markup=create_emotion_keyboard())
        await query.answer()

async def send_long_message(chat_id, text, context, reply_markup=None):
    MAX_LENGTH = 4096
    parts = [text[i:i + MAX_LENGTH] for i in range(0, len(text), MAX_LENGTH)]
    for part in parts[:-1]:
        await context.bot.send_message(chat_id, part)
        await asyncio.sleep(0.3)
    await context.bot.send_message(chat_id, parts[-1], reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_input = update.message.text.lower()

    if user_id not in user_data:
        await start(update, context)
        return

    state = user_data[user_id]
    stage = state["stage"]
    state["history"].append({"role": "user", "content": user_input})

    thinking_msg = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º... üåø")

    try:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}] + state["history"]
        completion = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
            temperature=0.6,
            timeout=15
        )
        response = completion.choices[0].message.content

        reply_markup = None
        if stage < 5:
            state["stage"] += 1
        else:
            reply_markup = create_more_info_keyboard()

        state["history"].append({"role": "assistant", "content": response})

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        response = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"

    finally:
        await context.bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)

    await send_long_message(user_id, response, context, reply_markup)

async def handle_more_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–º–æ–∂–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é üåü.\n\n"
        "–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üíõ"
    )

if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_emotion_choice, pattern="^(anxiety|apathy|anger|self_doubt|emptiness|loneliness|guilt|indecision)$"))
    application.add_handler(CallbackQueryHandler(handle_start_choice, pattern="^start_talk$"))
    application.add_handler(CallbackQueryHandler(handle_more_info, pattern="^more_info$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
